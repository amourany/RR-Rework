package game;

import game.Constant.BoxType;
import game.Constant.Direction;

import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;


/**
 *  Class containing the Board
 */
public class Board {
	/**
	 * @see Box
	 */
	private Box[][] gameBoard;

	private ArrayList<Integer> numBoardPieces = new ArrayList<Integer>();
	private char boardPiecesSide[] = new char[Constant.NB_BOARD_PIECES];

	private BoardPiece boardPieces[] = new BoardPiece[Constant.NB_BOARD_PIECES];


	public Board() {
		gameBoard = new Box[Constant.NB_BOXES][Constant.NB_BOXES];

		for(int i=0; i<Constant.NB_BOARD_PIECES; i++)
			numBoardPieces.add(i+1);

		Collections.shuffle(numBoardPieces);
		randomizeBoardPiecesSide();


		for (int i = 0; i<Constant.NB_BOARD_PIECES; i++)
		{		
			String mapPath = Constant.MAP_PATH + "boardpiece" + numBoardPieces.get(i) + boardPiecesSide[i] +".xml";
			int initialLocation = numBoardPieces.get(i);
			int finalLocation = i+1;

			System.out.println(mapPath);
			boardPieces[i] = new BoardPiece(new File(mapPath), initialLocation , finalLocation);
		}


		initboard();

		for(int i=0; i<Constant.NB_BOARD_PIECES; i++)
		{
			ArrayList<Box> boxes = boardPieces[i].getBoxes();
			System.out.println("BoardPiece " + (i+1));
			for( Iterator<Box> it = boxes.iterator(); it.hasNext(); )
			{
				Box box = it.next();
				System.out.println(box.getX() + " " + box.getY());
				gameBoard[box.getY()][box.getX()] = box;
			}
			System.out.println("\n");
		}


		putCentralBoxes();
		putSurroundingWalls();


	}


	private void randomizeBoardPiecesSide() {
		for(int i=0; i<Constant.NB_BOARD_PIECES; i++)
		{
			boardPiecesSide[i] = ((int) (Math.random()*100)%Constant.NB_BOARD_PIECES_SIDE+1)==1 ? 'A' : 'B';
		}
	}

	public void initboard()
	{
		for (int i=0 ; i<Constant.NB_BOXES ; i++)
		{
			for (int j=0 ; j<Constant.NB_BOXES ; j++)
			{
				gameBoard[i][j]=new Box();
			}
		}

	}

	private void putSurroundingWalls() {
		for (int i=0; i<Constant.NB_BOXES;i++)
		{
			gameBoard[i][0].setWall(Constant.Direction.Left);
			gameBoard[i][Constant.NB_BOXES-1].setWall(Constant.Direction.Right);
			gameBoard[0][i].setWall(Constant.Direction.Up);
			gameBoard[Constant.NB_BOXES-1][i].setWall(Constant.Direction.Down);
		}
	}

	private void putCentralBoxes() {
		gameBoard[7][7].setWall(Direction.Up);
		gameBoard[7][7].setWall(Direction.Left);

		gameBoard[7][8].setWall(Direction.Up);
		gameBoard[7][8].setWall(Direction.Right);

		gameBoard[8][7].setWall(Direction.Down);
		gameBoard[8][7].setWall(Direction.Left);

		gameBoard[8][8].setWall(Direction.Down);
		gameBoard[8][8].setWall(Direction.Right);

		gameBoard[7][7].setType(BoxType.Central, null);
		gameBoard[7][8].setType(BoxType.Central, null);
		gameBoard[8][7].setType(BoxType.Central, null);
		gameBoard[8][8].setType(BoxType.Central, null);
	}

	/**
	 * Move a robot in a direction
	 * @param robot robot that have to move
	 * @param direction direction that the robot is following
	 * @param robots all the robots of the game
	 * @see Direction
	 * @see Robot
	 */
	public Robot getNewPosition(Robot robot, Direction direction, List<Robot> robots) {
		int x = robot.x;
		int y = robot.y;
		while (gameBoard[y][x].canContinue(direction) 
				&& !robot.robotIsHere(x, y, robots, direction)) {
			switch (direction) {
			case Right :
				x++;
				break;
			case Left :
				x--;
				break;
			case Down :
				y++;
				break;
			case Up :
				y--;
				break;
			default:
				break;
			}
		}	
		return new Robot(x, y, robot.getColor());
	}

	/**
	 * Move a robot in a direction
	 * @param robot robot that have to move
	 * @param direction direction that the robot is following
	 * @param robots all the robots of the game
	 * @see Direction
	 * @see BoxColor
	 */
	public Robot getNewPosition(Movement movement, List<Robot> robots) {
		int x = movement.getRobot().x;
		int y = movement.getRobot().y;
		while (gameBoard[y][x].canContinue(movement.getDirection()) 
				&& !movement.getRobot().robotIsHere(x, y, robots, movement.getDirection())) {
			switch (movement.getDirection()) {
			case Right :
				x++;
				break;
			case Left :
				x--;
				break;
			case Down :
				y++;
				break;
			case Up :
				y--;
				break;
			default:
				break;
			}
		}	
		return new Robot(x, y, movement.getRobot().getColor());
	}

	public Box[][] getGameBoard() {
		return gameBoard;
	}

	public void setGameBoard(Box[][] gameBoard) {
		this.gameBoard = gameBoard;
	}


}

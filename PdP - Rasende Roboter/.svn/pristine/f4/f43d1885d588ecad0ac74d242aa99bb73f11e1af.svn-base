package game;


import java.awt.Dimension;
import java.awt.GridLayout;
import java.text.NumberFormat;

import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JTextField;

import launcher.Controller;


/**
 * @author Dimitri
 * @version 1
 */
public class RasendeFrame extends JFrame {
	/**
	 * 
	 */
	private static final long serialVersionUID = 4716072661083101699L;
	private JPanel mBoardPanel;
	private JPanel mColumnPanel;
	private JLabel mLabelRound, mLabelMove;

	/**
	 * Constructor of the class
	 * @param c : Controller
	 */
	public RasendeFrame(Controller controller){
		super();

		setSize(Constant.frameWidth, Constant.frameHeight);
		setTitle(Constant.frameTitle);
		
		setResizable(false);
		setLocationRelativeTo(null);
		setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		
		addWindowListener(controller);
				
		JMenuBar menuBar = new JMenuBar();
		JMenu menu;
		JMenuItem menuItem;

		menu = new JMenu("Game");
		menuBar.add(menu);

		menuItem = new JMenuItem("New Game");
		menuItem.addActionListener(controller);
		menu.add(menuItem);
		
		menu.addSeparator();

		menuItem = new JMenuItem("Quit");
		menuItem.addActionListener(controller);
		menu.add(menuItem);		

		menu = new JMenu("Another Menu");
		menuBar.add(menu);

		setJMenuBar(menuBar);

		JPanel contentPane = new JPanel();
		contentPane.setLayout(new BoxLayout(contentPane, BoxLayout.LINE_AXIS));
		
		mColumnPanel = new JPanel();
		mColumnPanel.setBackground(java.awt.Color.WHITE);
		mColumnPanel.setLayout(new BoxLayout(mColumnPanel, BoxLayout.PAGE_AXIS));
		mColumnPanel.setPreferredSize(new Dimension(Constant.columnWidth,Constant.boardSize));
		contentPane.add(mColumnPanel);
		
		mBoardPanel = new JPanel();
		mBoardPanel.setBackground(java.awt.Color.WHITE);
		mBoardPanel.setLayout(new GridLayout(Constant.numberOfcase, Constant.numberOfcase));
		mBoardPanel.setPreferredSize(new Dimension(Constant.boardSize,Constant.boardSize));
		mBoardPanel.addMouseListener(controller);
		contentPane.add(mBoardPanel);	
		contentPane.addKeyListener(controller);
		contentPane.setFocusable(true);
		contentPane.requestFocusInWindow();
		
		buildColumn(controller);
		
		setContentPane(contentPane);
	}

	
	private void buildColumn(Controller controller){
		mLabelRound = new JLabel("Current Round: " + 0 + "/17");
		mColumnPanel.add(mLabelRound);
		
		mLabelMove = new JLabel("Movements: " + 0);
		mColumnPanel.add(mLabelMove);

		JLabel labelTF= new JLabel("Movements' number:");
		mColumnPanel.add(labelTF);

		JFormattedTextField tf = new JFormattedTextField(NumberFormat.getIntegerInstance());
		mColumnPanel.add(tf);

		JButton validateButton = new JButton("Validate");
		validateButton.addActionListener(controller);
		mColumnPanel.add(validateButton);

		JPanel jp = new JPanel();
		jp.setLayout(new BoxLayout(jp, BoxLayout.LINE_AXIS));
		JButton backMovement = new JButton("<");
		backMovement.addActionListener(controller);
		jp.add(backMovement);
		JButton nextMovement = new JButton(">");
		nextMovement.addActionListener(controller);
		jp.add(nextMovement);
		mColumnPanel.add(jp);

		JButton solveButton = new JButton("Solution");
		solveButton.addActionListener(controller);
		mColumnPanel.add(solveButton);
		
		JPanel console = new JPanel();
		console.setLayout(new BoxLayout(console, BoxLayout.PAGE_AXIS));
		console.add(new JLabel("Console ?"));
		
		JPanel jpTxtField = new JPanel();
		jpTxtField.setLayout(new BoxLayout(jpTxtField, BoxLayout.LINE_AXIS));
		jpTxtField.add(new JTextField(Constant.columnWidth));
		
		console.add(jpTxtField);
		mColumnPanel.add(console);		
	}
	
	public void refresh(Game model){
		refreshBoard(model);
		refreshColumn(model);
	}
	
	public void refreshColumn(Game model){
		mLabelRound.setText("Current Round: " + model.getCurrentRound() + "/17");		
		mLabelMove.setText("Movements: " + model.getCounterLap());
	}

	/**
	 * 
	 */
	public void refreshBoard(Game model){
		mBoardPanel.removeAll();
				
		Box[][] board = model.getGameBoard().getBox();
				
		for(int i=0; i<Constant.numberOfcase; i++){
			for(int j=0; j<Constant.numberOfcase; j++){
				Robot current = null, origin = null;
				for(Robot r : model.getRobots()){
					if(r.getX() == j && r.getY() == i){
						current = r;
					}
					if(r.getOriginX() == j && r.getOriginY() == i){
						origin = r;
					}
				}				
				mBoardPanel.add(board[i][j].getJPanel(current, (current == model.getSelectedRobot()),origin, model.getGoalCard()));
			}
		}		
		mBoardPanel.validate();
	}
}

package view;

import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Iterator;
import java.util.List;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SpringLayout;

import model.Box;
import model.BoxColor;
import model.BoxType;
import model.Robot;
import controller.Controller;


public class InGameView extends AbstractView{
	private int size;
	private int currentRound;
	private Box[][] board;
	private List<Robot> robots;
	
	public InGameView(Controller c, JFrame f) {
		super(c, f);
		this.board=c.getModel().getGameBoard().getBox();
		this.size=c.getModel().getGameBoard().getPlateau_size();
		this.currentRound=c.getModel().getCurrentRound();
		this.robots=c.getModel().getRobots();
        buildContentPane();
	}


	@Override
	public void buildContentPane() {
		BoxType t=null;
		BoxColor color=null;
		ImageIcon icon;
		int i,j, x,y;
		
		SpringLayout layout = new SpringLayout();
		contentPane.setLayout(layout);

		/*Chargement des robots*/
        
        Robot r;
        Iterator<Robot> iterator = robots.iterator();
        while(iterator.hasNext()){
        	
          r = iterator.next();
          color=r.getColor();
          x=r.getX();
          y=r.getY();
          
          icon = new ImageIcon("code/images/robots/robot"+color+".png");
          JLabel labelRobot = imageShow(layout, icon, x*40, y*40, "West", "North", contentPane);
		 contentPane.add(labelRobot);
        }
        
        
		/*Chargement de la grille*/
		JPanel panelGird = new JPanel();
        panelGird.setLayout(new GridLayout(size,size));
        panelGird.setPreferredSize(new Dimension(40*size,40*size));

        for (i=0;i<size;i++)
		{
			for (j=0;j<size;j++)
			{
				t=board[i][j].getType();
				color=board[i][j].getColor();								
				
				if(color != null)
					icon = new ImageIcon("code/images/box/"+t+color+".png");
				else
					icon = new ImageIcon("code/images/box/"+t+".png");		
			
				panelGird.add(new JLabel("",icon,JLabel.CENTER));
				
				if(board[i][j].isNorth())
				{
					icon = new ImageIcon("code/images/wall_H.png");
					JLabel north = imageShow(layout, icon, j*40-4, i*40-4, "West", "North", contentPane);
					contentPane.add(north);
				}
				
				/*Chargement des murs*/
				if(board[i][j].isSouth())
				{
					icon = new ImageIcon("code/images/wall_H.png");
					JLabel south =  imageShow(layout, icon, j*40-4, i*40+36, "West", "North", contentPane);
					contentPane.add(south);
				}
				if(board[i][j].isEast())
				{
					icon = new ImageIcon("code/images/wall_V.png");
					JLabel east =  imageShow(layout, icon, j*40-4, i*40-4, "West", "North", contentPane);
					contentPane.add(east);
					
				}
				if(board[i][j].isWest())
				{
					icon = new ImageIcon("code/images/wall_V.png");
					JLabel west = imageShow(layout, icon, j*40+36, i*40-4, "West", "North", contentPane);
					contentPane.add(west);
				}
				
			}
		}
        contentPane.add(panelGird);
             
        /*Chargement des boutons latÃ©raux*/
        
        JLabel labelRound = imageShow(layout, null, -20, 300, "East", "North", contentPane);
        labelRound.setText("Current Round : "+currentRound);
		contentPane.add(labelRound);
		
		JButton backButton = positionButton(layout, "Back", -50, 400, "East", "North", contentPane);
		contentPane.add(backButton);
	
		backButton.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent arg0) {
				controller.createGameMenuView();
			}
		});
		frame.pack();
	}

}

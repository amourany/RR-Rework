package launcher;

import game.BoardPiece;
import game.Box;
import game.Constant;
import game.Countdown;
import game.Game;
import game.Robot;
import game.Constant.Color;
import game.Constant.Direction;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Stack;

import javax.swing.JOptionPane;
import javax.swing.JTextField;

import network.Client;
import network.Server;

import userInterface.RasendeFrame;

public class Controller extends OutputStream implements ActionListener, MouseListener, KeyListener, WindowListener{
	public final static String ACTION_PREVIOUS = "ACTION_PREVIOUS"; 
	public final static String ACTION_NEXT = "ACTION_NEXT";
	public final static String ACTION_QUIT = "ACTION_QUIT";
	public final static String ACTION_NEW_GAME = "ACTION_NEW_GAME";
	public final static String ACTION_HELP = "ACTION_HELP";
	public final static String ACTION_LICENSE = "ACTION_LICENSE";
	public final static String ACTION_SOLVE = "ACTION_SOLVE";
	public final static String ACTION_RETURN_GAME = "ACTION_RETURN_GAME";
	public final static String ACTION_START_SERVER = "ACTION_START_SERVER";
	public final static String ACTION_JOIN_SERVER = "ACTION_JOIN_SERVER";

	private Game game;
	private final RasendeFrame frame;
	private Server server;
	private Client client;

	public Controller() {
		super();
		final PrintStream out = new PrintStream(this);
		System.setOut(out);

		game = new Game();
		Countdown count = new Countdown(this);
		count.createCountdown();
		
		game.newCountdown(count);
		//game.startNewGame();
		
		frame = new RasendeFrame(this);
	}		

	public void initController() {
		game.startNewGame();
		frame.buildGameScreen(this);
		
		refreshBoard();

		frame.pack();

		frame.setVisible(true);
	}
	
	public Game getgame() {
		return game;
	}

	private void moveRobotInDirection(final Direction dir) {
		int x =-1 ,y = -1;

		if (game.getSelectedRobot() != null) {

			if(client!=null || server !=null) {
				x=game.getSelectedRobot().getX();
				y=game.getSelectedRobot().getY();
			}

			game.moveSelectedRobot(dir);
			
			refreshBoard();
			frame.refreshColumn(game);
			
			//if client, send movement to server (only if there is a new location)
			if (client!=null && (game.getSelectedRobot().x != x || game.getSelectedRobot().y != y))
				client.sendMove(game.getSelectedRobot().getColor(),	dir);
			//if sever, send movement to other clients (only if there is new location)
			else if(server !=null && (game.getSelectedRobot().x != x || game.getSelectedRobot().y != y))
				server.sendUpdates(game.getSelectedRobot().getColor(), dir);

			if(game.isOver()) {	gameOver(); }
		}
	}

	private void askToQuit(){
		game.getCount().stopCountdown();
		frame.dispose();
		System.exit(0);
	}

	public void timeLimit() {
		JOptionPane.showMessageDialog(frame,
				"Game Over!",
						"Game Over",
						JOptionPane.INFORMATION_MESSAGE);
		game.startNewGame();
		frame.refresh(game);
	}
	
	public void gameOver() {
		JOptionPane.showMessageDialog(frame,
				"Congratulations !! You beat the game !",
						"Congratulations",
						JOptionPane.INFORMATION_MESSAGE);
		game.startNewGame();
		frame.refresh(game);
	}
	
	public void actionPerformed(final ActionEvent e) {
		switch (e.getActionCommand()){
		case ACTION_PREVIOUS :
			game.loadPreviousPosition();
			frame.refresh(game);
			break;				
		case ACTION_NEXT :
			game.loadNextPosition();
			frame.refresh(game);
			break;
		case ACTION_QUIT :
			askToQuit();
			break;
		case ACTION_NEW_GAME :
			game.startNewGame();
			frame.refresh(game);
			break;
		case ACTION_HELP :
			game.getCount().stopCountdown();
			frame.refreshHelp();
			break;
		case ACTION_LICENSE :
			JOptionPane.showMessageDialog(frame,
					"License : GNU GPL v3\n\n"+
							"Olivier Braik\n" +
							"Alexandre Delesse\n" +
							"Gaetan Lussagnet\n" +
							"Alexandre Mourany\n" +
							"Dimitri Ranc",
							"v. 1.0",
							JOptionPane.INFORMATION_MESSAGE);
			break;
		case ACTION_SOLVE :
			game.startSolver();
			break;
		case ACTION_RETURN_GAME :
			frame.refresh(game);
			game.getCount().startCountdown();
			break;
		case ACTION_START_SERVER :
			if(client == null) {
				final String user = (String)JOptionPane.showInputDialog(frame,
						"Your username :",
						"Join Server",
						JOptionPane.WARNING_MESSAGE,null,null,"Anonymous Server");
				if ((user != null) && (user.length() > 0)) {
					server = new Server(this,user);
					game = server.getGame();
					game.startNewGame();
					frame.refresh(game);
				}
			}
			break;
		case ACTION_JOIN_SERVER :
			if(server == null) {
				JTextField pseudo = new JTextField();
				pseudo.setText("Anonymous Client");
				JTextField ipString = new JTextField();
				ipString.setText("127.0.0.1");

				Object[] message = {
						"Username:", pseudo,
						"Ip Server:", ipString
				};

				int option = JOptionPane.showConfirmDialog(frame,
						message,
						"Join Server",
						JOptionPane.WARNING_MESSAGE);

				if (option == JOptionPane.OK_OPTION) {
					if ((ipString.getText() != null)) {
						try {
							client = new Client(InetAddress.getByName(ipString.getText()), this,pseudo.getText());
							client.connect();
						} catch (UnknownHostException e1) {
							e1.printStackTrace();
						}	
					}
				}
			}
			break;
			default:
				System.out.println("Commande inconnue");
				break;
		}
		frame.contentPaneFocus();
	}

	public void mouseClicked(final MouseEvent e) {
		int line = e.getY()/Constant.CASE_SIZE;
		int column = e.getX()/Constant.CASE_SIZE;

		for(Robot r : game.getRobots()){
			if(column == r.x && line == r.y){
				game.setSelectedRobot(r);
				refreshBoard();
				return;
			}
		}

		if(game.getSelectedRobot() != null){
			if(game.getSelectedRobot().x == column){
				if(game.getSelectedRobot().y > line) { moveRobotInDirection(Direction.Up);}
				else {moveRobotInDirection(Direction.Down);}
			}
			else if(game.getSelectedRobot().y == line){
				if(game.getSelectedRobot().x > column) { moveRobotInDirection(Direction.Left); }
				else { moveRobotInDirection(Direction.Right);}
			}
		}	
	}

	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void keyPressed(final KeyEvent e) {
		switch(e.getKeyCode()) {
		case KeyEvent.VK_UP:
			moveRobotInDirection(Direction.Up);
			break;
		case KeyEvent.VK_DOWN:
			moveRobotInDirection(Direction.Down);
			break;
		case KeyEvent.VK_RIGHT:
			moveRobotInDirection(Direction.Right);
			break;
		case KeyEvent.VK_LEFT:
			moveRobotInDirection(Direction.Left);
			break;
		case KeyEvent.VK_1:
		case KeyEvent.VK_R :
			game.setSelectedRobot(Color.Red);
			break;
		case KeyEvent.VK_2:
		case KeyEvent.VK_G :
			game.setSelectedRobot(Color.Green);
			break;
		case KeyEvent.VK_3:
		case KeyEvent.VK_B :
			game.setSelectedRobot(Color.Blue);
			break;
		case KeyEvent.VK_4:
		case KeyEvent.VK_Y :
			game.setSelectedRobot(Color.Yellow);
			break;
		default:
			break;
		}
		refreshBoard();
	}

	@Override
	public void keyReleased(KeyEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void keyTyped(KeyEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void windowActivated(WindowEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void windowClosed(WindowEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void windowClosing(WindowEvent e) {
		frame.dispose();
	}

	@Override
	public void windowDeactivated(WindowEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void windowDeiconified(WindowEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void windowIconified(WindowEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void windowOpened(WindowEvent e) {
		// TODO Auto-generated method stub

	}

	public void setBoard(BoardPiece boardPiece) {
		boardPiece.initBoardPiece();
		game.getBoard().setBoardPiece(boardPiece);
		game.getBoard().setBoard();
	}

	/**
	 * Redirect System.out to the Frame
	 */
	public void write(int arg0) throws IOException {
		frame.write(String.valueOf((char) arg0));
	}

	public void setRobot(Robot r) {
		game.setRobotByColor(r.getColor(), r);
	}

	public void refreshBoard() {
		frame.refreshBoard(game);
	}

	public void refreshColumn() {
		frame.refreshColumn(game);
	}

	public Server getServer() {
		return server;
	}

	public Client getClient() {
		return client;
	}

	public void refreshPlayers(String user) {
		frame.refreshPlayers(user);
	}
	
	public void setCurrentGoal(Stack<Box> goal) {
		game.setCurrentGoal(goal.pop());
		game.setmGoalCards(goal);
	}
}

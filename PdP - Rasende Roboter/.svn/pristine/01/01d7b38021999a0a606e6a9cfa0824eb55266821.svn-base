package model;

import java.util.ArrayList;
import java.util.List;

public class Model {
	private Board gameBoard;
	private List<Robot> robots;
	private List<Player> players;
	private int currentRound;
	
	
	public Model() {
		this.currentRound = 1;
		this.gameBoard = new Board();
		this.robots = new ArrayList<Robot>();
		this.players = new ArrayList<Player>();
		createPlayer(); //To create the first player
	}

	public Board getGameBoard() {
		return gameBoard;
	}


	public void setGameBoard(Board gameBoard) {
		this.gameBoard = gameBoard;
	}


	public List<Robot> getRobots() {
		return robots;
	}

	/**
	 * Return the robot with the specified BoxColor
	 */
	public Robot getRobotByColor(BoxColor c) {
		for(Robot r : robots) {
			if(r.getColor() == c)
				return r;
		}
		return null;
	}
	
	public void setRobots(List<Robot> robots) {
		this.robots = robots;
	}


	public List<Player> getPlayers() {
		return players;
	}


	public void setPlayers(List<Player> players) {
		this.players = players;
	}


	public int getCurrentRound() {
		return currentRound;
	}


	public void setCurrentRound(int currentRound) {
		this.currentRound = currentRound;
	}
	
	/**
	 * Default boxes are empty. Then we change type and color of the special boxes.
	 */
	public void generateBoard()
	{
		robots = new ArrayList<Robot>();
		gameBoard = new Board();
		
		//Robot test
		Robot r = new Robot(BoxColor.Blue);
		r = r.placeOnBoard(robots);
		robots.add(r);
		
		r = new Robot(BoxColor.Green);
		r = r.placeOnBoard(robots);
		robots.add(r);
		
		r = new Robot(BoxColor.Yellow);
		r = r.placeOnBoard(robots);
		robots.add(r);
		
		r = new Robot(BoxColor.Red);
		r = r.placeOnBoard(robots);
		robots.add(r);
		
		//Central Box
		gameBoard.getBox()[7][7].setType(BoxType.Central);
		gameBoard.getBox()[7][8].setType(BoxType.Central);
		gameBoard.getBox()[8][7].setType(BoxType.Central);
		gameBoard.getBox()[8][8].setType(BoxType.Central);
		
		//More Boxes
		gameBoard.getBox()[0][4].setType(BoxType.More);
		gameBoard.getBox()[4][7].setType(BoxType.More);
		gameBoard.getBox()[12][2].setType(BoxType.More);
		gameBoard.getBox()[9][10].setType(BoxType.More);
		
		gameBoard.getBox()[0][4].setSouth(true);
		gameBoard.getBox()[4][7].setSouth(true);
		gameBoard.getBox()[0][4].setEast(true);
		gameBoard.getBox()[4][7].setEast(true);
		
		gameBoard.getBox()[12][2].setNorth(true);
		gameBoard.getBox()[9][10].setNorth(true);
		gameBoard.getBox()[12][2].setWest(true);
		gameBoard.getBox()[9][10].setWest(true);
		
		gameBoard.getBox()[0][4].setColor(BoxColor.Blue);
		gameBoard.getBox()[4][7].setColor(BoxColor.Green);
		gameBoard.getBox()[12][2].setColor(BoxColor.Yellow);
		gameBoard.getBox()[9][10].setColor(BoxColor.Red);
		
		oppositeWall();
	}

	/**
	 * Create a player and put it in the list
	 */
	public void createPlayer()
	{
		Player p=new Player();
		players.add(p);
	}
	

	public void move(BoxColor c, Direction d)
	{
		Robot r = getRobotByColor(c);
		switch (d) {
		case Right :
			while(!gameBoard.getBox()[r.y][r.x].isEast() && r.x!=gameBoard.getPlateau_size()-1 && !(gameBoard.getBox()[r.y][r.x+1].getType() == BoxType.Central))
			r.x++;
			break;
		case Left :
			while(!gameBoard.getBox()[r.y][r.x].isWest() && r.x!=0 && !(gameBoard.getBox()[r.y][r.x-1].getType() == BoxType.Central))
			r.x--;
			break;
		case Down :
			while(!gameBoard.getBox()[r.y][r.x].isSouth() && r.y!=gameBoard.getPlateau_size()-1 && !(gameBoard.getBox()[r.y+1][r.x].getType() == BoxType.Central))
			r.y++;
			break;
		case Up :
			while(!gameBoard.getBox()[r.y][r.x].isNorth() && r.y!=0 && !(gameBoard.getBox()[r.y-1][r.x].getType() == BoxType.Central))
			r.y--;
			break;
		}
	}
	
	/**
	 * Build the opposite wall
	 * Example :If the north wall of a box exist then the south wall of the box above must be built
	 */
	public void oppositeWall()
	{
		for(int i=0;i<gameBoard.getPlateau_size();i++)
		{
			for(int j=0;j<gameBoard.getPlateau_size();j++)
			{
				if(gameBoard.getBox()[i][j].isEast())
				{
					if(j != gameBoard.getPlateau_size()-1)
					{
						gameBoard.getBox()[i][j+1].setWest(true);
					}
				}
				if(gameBoard.getBox()[i][j].isWest())
				{
					if(j != 0)
					{
						gameBoard.getBox()[i][j-1].setEast(true);
					}
				}
				if(gameBoard.getBox()[i][j].isNorth())
				{
					if(i != 0)
					{
						gameBoard.getBox()[i-1][j].setSouth(true);
					}
				}
				if(gameBoard.getBox()[i][j].isSouth())
				{
					if(i != gameBoard.getPlateau_size()-1)
					{
						gameBoard.getBox()[i+1][j].setNorth(true);
					}
				}
			}
		}
	}

}

package network;

import game.BoardPiece;
import game.Constant;
import game.Game;
import game.Player;
import game.Robot;
import game.Constant.Color;
import game.Constant.Direction;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.util.ArrayList;
import java.util.List;
import launcher.Controller;

/**
 * Server side of the application
 */
public class Server {
	private Game game;
	private List<Player> players;
	private DatagramSocket socket;
	private Controller controller;
	private String username;
	private boolean hand;
	
	private Thread serverThread = new Thread() {
		public void run() {
			listen();
		}
	};

	
	public Server(Controller controller,String pseudo)
	{
		game = new Game(controller);
		hand=false;
		
		players = new ArrayList<Player>();
		username = pseudo;
		this.controller = controller;
		
		try {
			socket = new DatagramSocket(Constant.SERVER_PORT);
			Player p=new Player(socket.getInetAddress(),username);
			p.setHost(true);
			players.add(p);
			System.out.println("The server is launched! ");
			this.controller.refreshPlayers(p.getPseudo()+"("+p.getPoints()+"pts) : "+p.getNbMoveProposed()+" movements proposed\n");
			this.controller.refreshColumn();
		} catch (SocketException e) {
			e.printStackTrace();
		}
		
		serverThread.start();		
	}
	
	/**
	 * Listen for the data from clients
	 */
	private void listen() {
		String[] data;
		
		try {
			byte[] buffer = new byte[1500];
			DatagramPacket packet = new DatagramPacket(buffer, buffer.length);
			
			while(true) {
				socket.receive(packet);
				
				data = Protocol.decodePacket(packet);
				
				if(data[0].equals(Protocol.CONNECT)){
					players.add(new Player(packet.getAddress(), data[1]));
					sendBoard(packet.getAddress());
					sendRobots(packet.getAddress());
					sendCard(packet.getAddress());
					sendTime(packet.getAddress());
					updatePlayers();	
					sendRefresh(packet.getAddress());
				}
					processData(data);
				
				}
		} catch (SocketException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Updates the list of players for the server and all clients
	 */
	private void updatePlayers() {
		
		String data = "";
		DatagramPacket packet;
		
		//Update
		for(Player p2 : players) {
			data = Protocol.encodeClient(players);
			//If client
			if (!p2.isHost())
			{
				packet = Protocol.encodePacket(data, p2.getIp(), Constant.CLIENT_PORT);
			
				try {
					socket.send(packet);
				} catch (IOException e) {
					e.printStackTrace();
				}		
			}
			//If Server
			else if(p2.isHost())
			{
				data = data.substring(Protocol.CLIENT.length()+1); //substract "client&"
				controller.refreshPlayers(data);
			}
		}	
	}

	private void processData(String[] data) {
		Color c;
		Direction d;
		
		switch(data[0]) {
			case Protocol.MOVE:
				c = Color.valueOf(data[1]);
				d = Direction.valueOf(data[2]);
				controller.setSelectedRobot(c);
				controller.moveRobotInDirection(d);
				controller.refreshBoard();
				controller.refreshColumn();
				sendUpdates(c,d);
				break;
				
			case Protocol.PROPOSITION :
				updatePropositionfromPlayer(data[1], Integer.parseInt(data[2]));
				break;
				
			default:
				break;
		}
		
	}

	/**
	 * Send the new board to client
	 * @param ip : InetAddress
	 */
	private void sendBoard(InetAddress ip) {
		String boardInfo;
		DatagramPacket packet;
		try {	
			for(BoardPiece bp : game.getBoard().getBoardPiece()) {
				boardInfo = Protocol.encodeBoardPiece(bp);
				
				packet = Protocol.encodePacket(boardInfo, ip, Constant.CLIENT_PORT);
				socket.send(packet);
			}
		} catch (SocketException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	private void sendCard(InetAddress ip) {
		String cardInfo = Protocol.encodeGoalCard(game.getmGoalCards(), game.getCurrentGoal());
		DatagramPacket packet = Protocol.encodePacket(cardInfo, ip, Constant.CLIENT_PORT);
	
		try {
			socket.send(packet);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * Send the starting position of all the robots
	 * @param ip : InetAddress
	 */
	private void sendRobots(InetAddress ip) {
		DatagramPacket packet;
		String robotInfo;
		try {		
			for(Robot r : game.getRobots()) {
				robotInfo = Protocol.encodeRobot(r);
				
				packet = Protocol.encodePacket(robotInfo, ip, Constant.CLIENT_PORT);
				
				socket.send(packet);
			}
		} catch (SocketException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Send the current time of the countdown
	 * @param ip
	 */
	public void sendTime(InetAddress ip) {
		try {	
				String timeInfo = Protocol.encodeTime(game.getCount());
				
				DatagramPacket packet = Protocol.encodePacket(timeInfo, ip, Constant.CLIENT_PORT);
				
				socket.send(packet);

		} catch (SocketException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Send the current time of the countdown to all clients
	 */
	public void sendTimeToAllClients() {
		for(Player p : players)
		{
			if(!p.isHost())
				sendTime(p.getIp());
		}
	}

	/**
	 * Ask all clients to refresh their screen
	 * @param ip : InetAddress
	 */
	private void sendRefresh(InetAddress ip) {
		String data = Protocol.REFRESH;
		DatagramPacket packet = Protocol.encodePacket(data, ip, Constant.CLIENT_PORT);
		
		try {
			socket.send(packet);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Send Updates to all clients when there is a movement
	 * @param color : the color of robot to move
	 * @param d : the direction
	 * @param box 
	 * @see Color
	 * @see Direction
	 */
	public void sendUpdates(Color color, Direction d) {
		String data;
		DatagramPacket packet;
		
		for(Player p : players) { 	
			if(!p.isHost())
			{
				data = Protocol.encodeMove(color, d);
				
				packet = Protocol.encodePacket(data, p.getIp(), Constant.CLIENT_PORT);
				
				try {
					socket.send(packet);
				} catch (IOException e) {
					e.printStackTrace();
				}		
					sendRefresh(p.getIp());
			}
		}
	}
	
	/***
	 * Send a new proposition from a player, update the number in the list of players
	 * @param user
	 * @param nb
	 */
	public void updatePropositionfromPlayer(String user, int nb)
	{
		String puser;
		int cpt = 0;
		Player playerTmp=null;
		
		for(Player p : players)
		{
			puser=p.getPseudo();
			if(puser.equals(user))
			{	
				p.setNbMoveProposed(nb);
				playerTmp = players.get(cpt);
			}
			cpt++;
		}
		
		if(playerTmp != null)
		{
			players.remove(playerTmp);
			players.add(playerTmp);
		}
		
		updatePlayers();
		
		
		if(checkStartCount())
		{
			playerTmp = null;
			for(Player p: players)
			{
				if(playerTmp==null || p.getNbMoveProposed()<playerTmp.getNbMoveProposed())
				{
					playerTmp=p;
				}
			}
			
			players.get(players.indexOf(playerTmp)).setHand(true);
			
			if(!playerTmp.isHost())
			{
				sendHands(playerTmp.getIp(),true);
			}
			else
				hand=true;
				
			
			
			System.out.println("Plus BAS :"+playerTmp.getNbMoveProposed()+" proposÃ© en premier par : "+playerTmp.getPseudo());
			game.getCount().startCountdown();
		}
	}
	
	private void sendHands(InetAddress ip, boolean bool) {
		String data = Protocol.encodeHand(bool);
					
		DatagramPacket packet = Protocol.encodePacket(data, ip, Constant.CLIENT_PORT);
					
		try {
			socket.send(packet);
		} catch (IOException e) {
			e.printStackTrace();
		}		
		
		sendRefresh(ip);
	}

	/**
	 * Check if we need to start the countdown
	 * @return 
	 */
	private boolean checkStartCount(){

		boolean startCount=true;
		
		for(Player p : players)
		{
			if(p.getNbMoveProposed()<=0)
				startCount=false;	
		}
		
		return startCount;
	}

	public Game getGame() {
		return game;
	}
	public void setGame(Game game) {
		this.game = game;
	}
	
	public List<Player> getPlayers() {
		return players;
	}

	public void setPlayers(List<Player> players) {
		this.players = players;
	}
	
	public String getUsername() {
		return username;
	}

	public boolean isHand() {
		return hand;
	}

	public void setHand(boolean hand) {
		this.hand = hand;
	}
}
package view;

import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.NumberFormat;
import java.util.Iterator;
import java.util.List;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SpringLayout;

import model.Box;
import model.BoxColor;
import model.BoxType;
import model.Player;
import model.Robot;
import controller.Controller;


public class InGameView extends AbstractView{
	private int size;
	private int currentRound;
	private Box[][] board;
	private List<Robot> robots;
	private Player playerSolo;
	
	public InGameView(Controller c, JFrame f) {
		super(c, f);
		this.board = c.getModel().getGameBoard().getBox();
		this.size = c.getModel().getGameBoard().getPlateau_size();
		this.currentRound = c.getModel().getCurrentRound();
		this.robots = c.getModel().getRobots();
		this.playerSolo = c.getModel().getPlayers().get(0);
        buildContentPane();
	}

	/**
	 * Show a dialog box want you want quit this view
	 * @param screen redirect to Menu or Option
	 */
	public void dialogQuit(String screen)
	{
		Object[] options = {"Yes", "No"};
        int n = JOptionPane.showOptionDialog(frame,
                        "Are you sure you want to quit?",
                        "Quit",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        options,
                        options[0]);
        if (n == JOptionPane.YES_OPTION) {
        	if (screen=="menu")
        		controller.createGameMenuView();
        	else if (screen=="options")
        		controller.createOptionsView();
        }
	}

	@Override
	public void buildContentPane() {
		BoxType boxType = null;
		BoxColor color = null;
		ImageIcon icon;
		int i, j, x, y, originX, originY;
		
		SpringLayout layout = new SpringLayout();
		contentPane.setLayout(layout);

		/* Loading robots */
        
		for(Robot r : robots) {
			color = r.getColor();
	          x = r.getX();
	          y = r.getY();
	          originX = r.getOriginX();
	          originY = r.getOriginY();
	          
	          icon = new ImageIcon("code/images/robots/robot"+color+".png");
	          JLabel labelRobot = imageShow(layout, icon, x*40, y*40, "West", "North", contentPane);
	          contentPane.add(labelRobot);
	          
	          icon = new ImageIcon("code/images/box/Start"+color+".png");
	          labelRobot = imageShow(layout, icon, x*40, y*40, "West", "North", contentPane);
	          contentPane.add(labelRobot);
		}
		        
		/* Loading board */
		JPanel panelGird = new JPanel();
        panelGird.setLayout(new GridLayout(size,size));
        panelGird.setPreferredSize(new Dimension(40*size,40*size));

        for (i = 0; i < size; i++)
		{
			for (j = 0; j < size; j++)
			{
				boxType = board[i][j].getType();
				color = board[i][j].getColor();
				
				if(color != null)
					icon = new ImageIcon("code/images/box/"+boxType+color+".png");
				else
					icon = new ImageIcon("code/images/box/"+boxType+".png");		
			
				panelGird.add(new JLabel("",icon,JLabel.CENTER));
				
				if(board[i][j].isNorth())
				{
					icon = new ImageIcon("code/images/wall_H.png");
					JLabel north = imageShow(layout, icon, j*40-4, i*40-4, "West", "North", contentPane);
					contentPane.add(north);
				}
				
				/* Loading walls */
				if(board[i][j].isSouth())
				{
					icon = new ImageIcon("code/images/wall_H.png");
					JLabel south =  imageShow(layout, icon, j*40-4, i*40+36, "West", "North", contentPane);
					contentPane.add(south);
				}
				if(board[i][j].isEast())
				{
					icon = new ImageIcon("code/images/wall_V.png");
					JLabel east =  imageShow(layout, icon, j*40-4, i*40-4, "West", "North", contentPane);
					contentPane.add(east);
					
				}
				if(board[i][j].isWest())
				{
					icon = new ImageIcon("code/images/wall_V.png");
					JLabel west = imageShow(layout, icon, j*40+36, i*40-4, "West", "North", contentPane);
					contentPane.add(west);
				}
				
			}
		}
        contentPane.add(panelGird);
             
        /* Loading side buttons */
        
        JLabel labelRound = imageShow(layout, null, 644, 20, "West", "North", contentPane);
        labelRound.setText("Current Round : "+currentRound+"/17");
		contentPane.add(labelRound);
		
		JLabel labelPlayer = imageShow(layout, null, 644, 40, "West", "North", contentPane);
		labelPlayer.setText("Points : "+playerSolo.getPoints());
		contentPane.add(labelPlayer);
		
		JLabel labelTF= imageShow(layout, null, 644, 80, "West", "North", contentPane);
        labelTF.setText("Movements' number:");
		contentPane.add(labelTF);
		
		JFormattedTextField TF = new JFormattedTextField(NumberFormat.getIntegerInstance());
		layout.putConstraint(SpringLayout.WEST, TF, 670, SpringLayout.WEST, contentPane);
		layout.putConstraint(SpringLayout.NORTH, TF, 100, SpringLayout.NORTH, contentPane);
		TF.setPreferredSize(new Dimension(100, 20));
		contentPane.add(TF);
		
		JButton validateButton = positionButton(layout, "Validate", 673, 130, "West", "North", contentPane);
		contentPane.add(validateButton);
		
		JButton backMovement = positionButton(layout, "<", 668, 160, "West", "North", contentPane);
		backMovement.setToolTipText("Precedent Movement");
		contentPane.add(backMovement);
		
		JButton nextMovement = positionButton(layout, ">", 728, 160, "West", "North", contentPane);
		nextMovement.setToolTipText("Next Movement");
		contentPane.add(nextMovement);
		
		JButton solveButton = positionButton(layout, "Solution", 673, 300, "West", "North", contentPane);
		contentPane.add(solveButton);
		
		JButton optionButton = positionButton(layout, "Back Options", 656, 510, "West", "North", contentPane);
		contentPane.add(optionButton);
		
		JButton menuButton = positionButton(layout, "Back Menu", 666, 550, "West", "North", contentPane);
		contentPane.add(menuButton);
	
		
		validateButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				
				/* A décomenter lorsque l'on vérifira le nombre
				JOptionPane.showMessageDialog(frame,
					    "Please enter a number greater than zero !",
					    "Inane error",
					    JOptionPane.ERROR_MESSAGE);
					    */
			}
		});
		
		optionButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				dialogQuit("options");
			}
		});
		
		menuButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				dialogQuit("menu");
			}
		});
		frame.pack();
	}
}

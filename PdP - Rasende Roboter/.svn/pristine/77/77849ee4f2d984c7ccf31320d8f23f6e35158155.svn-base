package view;

import interactions.KeyEventListener;

import java.awt.Component;
import java.awt.Dimension;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SpringLayout;

import model.Constant;

import controller.Controller;

/**
 * All views inherit from this class
 */
public abstract class AbstractView {
	/**
	 * @see Controller
	 */
	protected Controller controller;
	/**
	 * @see JFrame
	 */
	protected JFrame frame;
	/**
	 * @see JPanel
	 */
	protected JPanel contentPane;
	
	/**
	 * Constructor of the class
	 * @param c : Controller
	 * @param f : JFrame
	 */
	public AbstractView(Controller c, JFrame f) {
		controller = c;
		frame = f;
		initContentPane();
	}
	
	public void initContentPane() {
		contentPane = new JPanel();
		contentPane.setPreferredSize(new Dimension(Constant.frameW, Constant.frameH));
		contentPane.addKeyListener(new KeyEventListener(controller));
		contentPane.setFocusable(true);
		contentPane.requestFocusInWindow();
		frame.setContentPane(contentPane);
	}

	/**
	 * Function to put an image icon in a JLabel.
	 * @param layout : SpringLayout, layout you want to use
	 * @param icon : ImageIcon, the sprite you want to show
	 * @param x : int, value of the horizontal offset
	 * @param y : int, value of the vertical offset
	 * @param direction1 : String, direction of the horizontal offset ("East" or "West")
	 * @param direction2 : String, direction of the vertical offset ("North" or "South")
	 * @param c2 : contentPane
	 * @return JLabel with icon and offsets
	 */
	public JLabel imageShow(SpringLayout layout, ImageIcon icon, int x, int y, 
			  String direction1, String direction2, Component c2)
	{
		JLabel label = new JLabel("",icon,JLabel.CENTER);
			
		layout.putConstraint(direction1, label, x, direction1, c2);
		layout.putConstraint(direction2, label, y, direction2, c2);
		
		return label;
	}
	
	/**
	 * Function which fixes the position of a button.
	 * @param layout : SpringLayout, layout you want to use
	 * @param text : String, text of the button
	 * @param x : int, value of the horizontal offset
	 * @param y : int, value of the vertical offset
	 * @param direction1 : String, direction of the horizontal offset ("East" or "West")
	 * @param direction2 : String, direction of the vertical offset ("North" or "South")
	 * @param c2 : contentPane
	 * @return JButton with offsets
	 */
	public JButton positionButton(SpringLayout layout, String text, int x, int y, 
			  String direction1, String direction2, Component c2)
	{
		JButton button = new JButton(text);
		layout.putConstraint(direction1, button, x, direction1, c2);
		layout.putConstraint(direction2, button, y, direction2, c2);
		
		return button;
	}
	
	
	/**
	 *  Function use to build the main content pane of the screen 
	 */
	public abstract void buildContentPane();
}

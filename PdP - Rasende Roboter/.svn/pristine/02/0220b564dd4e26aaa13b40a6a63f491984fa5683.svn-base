package game;

import game.Constant.BoxType;
import game.Constant.Direction;

import java.util.List;

/**
 *  Class containing the Board
 */
public class Board {
	/**
	 * @see Box
	 */
	private Box[][] board;

	private int numBoardPieces[];
	private int numBoardPiecesSide[];
	
	
	public Board() {
		board = new Box[Constant.numberOfBoxes][Constant.numberOfBoxes];
		
		numBoardPieces = new int[Constant.numberOfBoardPieces];
		numBoardPiecesSide = new int[Constant.numberOfBoardPieces];

		randomizedBoardPieces();
		initboard();
		
	}

	private void randomizedBoardPieces() {
		for(int i=0; i<Constant.numberOfBoardPieces; i++)
		{
			numBoardPieces[i] = (int) (Math.random()*100)%Constant.numberOfBoardPieces+1;
			numBoardPiecesSide[i] = (int) (Math.random()*100)%Constant.numberOfBoardPiecesSide+1;
		}
	}
	
	public void initboard()
	{
		for (int i=0 ; i<Constant.numberOfBoxes ; i++)
		{
			for (int j=0 ; j<Constant.numberOfBoxes ; j++)
			{
				board[i][j]=new Box();
			}
		}
		
		putCentralBoxes();
		putSurroundingWalls();

		
	}

	private void putSurroundingWalls() {
		for (int i=0; i<Constant.numberOfBoxes;i++)
		{
			board[i][0].setWall(Constant.Direction.Left);
			board[i][Constant.numberOfBoxes-1].setWall(Constant.Direction.Right);
			board[0][i].setWall(Constant.Direction.Up);
			board[Constant.numberOfBoxes-1][i].setWall(Constant.Direction.Down);
		}
	}

	private void putCentralBoxes() {
		board[7][7].setWall(Direction.Up);
		board[7][7].setWall(Direction.Left);

		board[7][8].setWall(Direction.Up);
		board[7][8].setWall(Direction.Right);

		board[8][7].setWall(Direction.Down);
		board[8][7].setWall(Direction.Left);

		board[8][8].setWall(Direction.Down);
		board[8][8].setWall(Direction.Right);

		board[7][7].setType(BoxType.Central, null);
		board[7][8].setType(BoxType.Central, null);
		board[8][7].setType(BoxType.Central, null);
		board[8][8].setType(BoxType.Central, null);
	}

	public Box[][] getBox() {
		return board;
	}

	public void setBox(Box[][] box) {
		this.board = box;
	}

	/**
	 * Move a robot in a direction
	 * @param robot robot that have to move
	 * @param direction direction that the robot is following
	 * @param robots all the robots of the game
	 * @see Direction
	 * @see Robot
	 */
	public Robot getNewPosition(Robot robot, Direction direction, List<Robot> robots) {
		int x = robot.x;
		int y = robot.y;
		while (this.getBox()[y][x].canContinue(direction) 
				&& !robot.robotIsHere(x, y, robots, direction)) {
			switch (direction) {
			case Right :
				x++;
				break;
			case Left :
				x--;
				break;
			case Down :
				y++;
				break;
			case Up :
				y--;
				break;
			}
		}	
		return new Robot(x, y, robot.getColor());
	}
	
	/**
	 * Move a robot in a direction
	 * @param robot robot that have to move
	 * @param direction direction that the robot is following
	 * @param robots all the robots of the game
	 * @see Direction
	 * @see BoxColor
	 */
	public Robot getNewPosition(Movement movement, List<Robot> robots) {
		int x = movement.getRobot().x;
		int y = movement.getRobot().y;
		while (this.getBox()[y][x].canContinue(movement.getDirection()) 
				&& !movement.getRobot().robotIsHere(x, y, robots, movement.getDirection())) {
			switch (movement.getDirection()) {
			case Right :
				x++;
				break;
			case Left :
				x--;
				break;
			case Down :
				y++;
				break;
			case Up :
				y--;
				break;
			}
		}	
		return new Robot(x, y, movement.getRobot().getColor());
	}
}

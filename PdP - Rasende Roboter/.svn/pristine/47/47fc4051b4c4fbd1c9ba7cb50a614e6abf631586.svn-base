package view;

import interactions.ClickOnBoardListener;
import interactions.ClickOnRobotListener;

import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.NumberFormat;
import java.util.List;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SpringLayout;

import model.Box;
import model.Constant;
import model.Constant.BoxType;
import model.Constant.Color;
import model.Player;
import model.Robot;
import controller.Controller;

/**
 * View of the Game (Solo)
 */
public class InGameView extends AbstractView{
	/**
	 * @see Robot
	 */
	List<Robot> robots;
	String themePath = "code/images/";
	
	/**
	 * Constructor of the view
	 * @param c : the controller
	 * @param f : the frame
	 * @see Controller
	 * @see JFrame
	 */
	public InGameView(Controller c, JFrame f) {
		super(c, f);
		robots = controller.getModel().getRobots();
		buildContentPane();
	}

	/**
	 * Show a dialog box if you want quit this view
	 * @param screen redirect to Menu or Option
	 */
	public void dialogQuit(String screen)
	{
		Object[] options = {"Yes", "No"};
		int n = JOptionPane.showOptionDialog(frame,
				"Are you sure you want to quit?",
				"Quit",
				JOptionPane.YES_NO_OPTION,
				JOptionPane.QUESTION_MESSAGE,
					null,
					options,
					options[0]);
		if (n == JOptionPane.YES_OPTION) {
			if (screen=="menu")
				controller.createGameMenuView();
			else if (screen=="options")
					controller.createOptionsView();
			}	
	}
	
	/**
	 * Show a dialog if you want a new Goal Card 
	 */
	public void dialogNew()
	{
		Object[] options = {"Yes", "No"};
		int k = JOptionPane.showOptionDialog(frame,
					"SUCCESS \n Do you want a new Goal Card?",
					"Next Round",
					JOptionPane.YES_NO_OPTION,
					JOptionPane.QUESTION_MESSAGE,
					null,
					options,
					options[0]);
		if (k == JOptionPane.YES_OPTION) 
				controller.newRound();
		
	}

	/**
	 * Main display function
	 */
	public void buildContentPane() {
		int size = controller.getModel().getGameBoard().getPlateau_size();
		int currentRound = controller.getModel().getCurrentRound();
		Box[][] board = controller.getModel().getGameBoard().getBox();
		Player playerSolo = controller.getModel().getPlayers().get(0);
		Robot selectedR = controller.getSelectedRobot();
		
		/*Goal Card */
		Box goalCard= controller.getGoalCard();
		if (goalCard==null){
			goalCard = controller.initGoalCard();
		}

			
		
		SpringLayout layout = new SpringLayout();
		contentPane.setLayout(layout);


		/*GoalCard*/
		goalCardMiddle(goalCard, layout);
	
		/* Loading robots */
		loadingRobots(selectedR, layout);
		
		/* Loading board */
		loadingBoard(size, board, layout);


		/* Loading side buttons */
		loadingSideButtons(currentRound, playerSolo, layout);
		
		frame.pack();
		contentPane.requestFocusInWindow();
	}

	/**
	 * Load Right tools
	 * @param currentRound : current Round
	 * @param playerSolo : the player
	 * @param layout : current layout
	 * @see Player
	 * @see SpringLayout
	 */
	private void loadingSideButtons(int currentRound, Player playerSolo,
			SpringLayout layout) {
		JLabel labelRound = imageShow(layout, null, Constant.girdSize+4, 20, "West", "North", contentPane);
		labelRound.setText("Current Round: "+currentRound+"/17");
		contentPane.add(labelRound);

		JLabel labelPlayer = imageShow(layout, null, Constant.girdSize+4, 40, "West", "North", contentPane);
		labelPlayer.setText("Points: "+playerSolo.getPoints());
		contentPane.add(labelPlayer);
		
		JLabel labelMove = imageShow(layout, null, Constant.girdSize+4, 80, "West", "North", contentPane);
		labelMove.setText("Movements: "+playerSolo.getMovementsDone());
		contentPane.add(labelMove);

		JLabel labelTF= imageShow(layout, null, Constant.girdSize+4, 120, "West", "North", contentPane);
		labelTF.setText("Movements' number:");
		contentPane.add(labelTF);

		JFormattedTextField TF = new JFormattedTextField(NumberFormat.getIntegerInstance());
		layout.putConstraint(SpringLayout.WEST, TF, Constant.girdSize+30, SpringLayout.WEST, contentPane);
		layout.putConstraint(SpringLayout.NORTH, TF, 140, SpringLayout.NORTH, contentPane);
		TF.setPreferredSize(new Dimension(100, 20));
		contentPane.add(TF);

		JButton validateButton = positionButton(layout, "Validate", Constant.girdSize+32, 170, "West", "North", contentPane);
		contentPane.add(validateButton);

		JButton backMovement = positionButton(layout, "<", Constant.girdSize+29, 200, "West", "North", contentPane);
		backMovement.setToolTipText("Precedent Movement");
		contentPane.add(backMovement);

		JButton nextMovement = positionButton(layout, ">", Constant.girdSize+88, 200, "West", "North", contentPane);
		nextMovement.setToolTipText("Next Movement");
		contentPane.add(nextMovement);

		JButton solveButton = positionButton(layout, "Solution", Constant.girdSize+33, 320, "West", "North", contentPane);
		contentPane.add(solveButton);

		JButton optionButton = positionButton(layout, "Back Options", Constant.girdSize+16, 510, "West", "North", contentPane);
		contentPane.add(optionButton);

		JButton menuButton = positionButton(layout, "Back Menu", Constant.girdSize+26, 550, "West", "North", contentPane);
		contentPane.add(menuButton);


		validateButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

				/* A décomenter lorsque l'on vérifira le nombre
				JOptionPane.showMessageDialog(frame,
					    "Please enter a number greater than zero !",
					    "Inane error",
					    JOptionPane.ERROR_MESSAGE);
				 */
			}
		});
		
		backMovement.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				controller.previousMove();
			}
		});
		
		nextMovement.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				controller.nextMove();
			}
		});
		
		solveButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				System.out.println("Lance AI !");
				
				controller.launchSolver();
				
			}
		});

		optionButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				dialogQuit("options");
			}
		});

		menuButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				dialogQuit("menu");
			}
		});
	}

	/**
	 * Displays the board
	 * @param size : size of the Board
	 * @param board : the board
	 * @param layout : current layout
	 * @see Box
	 * @see SpringLayout
	 */
	private void loadingBoard(int size, Box[][] board, SpringLayout layout) {
		BoxType boxType;
		Color color;
		ImageIcon icon;
		int i;
		int j;
		JPanel panelGird = new JPanel();
		panelGird.setLayout(new GridLayout(size,size));
		panelGird.setPreferredSize(new Dimension(Constant.caseSize*size,Constant.caseSize*size));
		panelGird.setBackground(java.awt.Color.white);
		for (i = 0; i < size; i++)
		{
			for (j = 0; j < size; j++)
			{
				boxType = board[i][j].getType();
				color = board[i][j].getColor();

				if(color != null)
					icon = new ImageIcon(themePath+"box/"+boxType+color+".png");
				else
					icon = new ImageIcon(themePath+"box/"+boxType+".png");		

				JLabel labelBox = new JLabel("",icon,JLabel.CENTER);
				labelBox.addMouseListener(new ClickOnBoardListener(controller, j, i));

				panelGird.add(labelBox);

				/* Loading walls */
				if(board[i][j].isNorth())
				{
					icon = new ImageIcon(themePath+"wall_H.png");
					JLabel north = imageShow(layout, icon, j*Constant.caseSize-4, i*Constant.caseSize-4, "West", "North", contentPane);
					contentPane.add(north);
				}

				if(board[i][j].isSouth())
				{
					icon = new ImageIcon(themePath+"wall_H.png");
					JLabel south =  imageShow(layout, icon, j*Constant.caseSize-4, i*Constant.caseSize+36, "West", "North", contentPane);
					contentPane.add(south);
				}
				if(board[i][j].isEast())
				{
					icon = new ImageIcon(themePath+"wall_V.png");
					JLabel east =  imageShow(layout, icon, j*Constant.caseSize+36, i*Constant.caseSize-4, "West", "North", contentPane);
					contentPane.add(east);

				}
				if(board[i][j].isWest())
				{
					icon = new ImageIcon(themePath+"/wall_V.png");
					JLabel west = imageShow(layout, icon, j*Constant.caseSize-4, i*Constant.caseSize-4, "West", "North", contentPane);
					contentPane.add(west);
				}

			}
		}
		contentPane.add(panelGird);
	}

	/**
	 * Start a new Dialog, when Goal Card is reached
	 */
	public void newGoalCard(){
		dialogNew();
	}
	
	/**
	 * Displays goal Card on the middle of the Board
	 * @param goalCard : current target
	 * @param layout : current layout
	 * @see Box
	 * @see SpringLayout
	 */
	private void goalCardMiddle(Box goalCard, SpringLayout layout) {
		ImageIcon icon;
		if (goalCard.getType()==BoxType.Multi)
			icon = new ImageIcon(themePath+"box/"+goalCard.getType()+".png");
		else	
			icon = new ImageIcon(themePath+"box/"+goalCard.getType()+goalCard.getColor()+".png");
		JLabel labelCard = imageShow(layout, icon, 7*Constant.caseSize+20, 7*Constant.caseSize+20, "West", "North", contentPane);
		contentPane.add(labelCard);
	}

	/**
	 * Displays robots on the screen
	 * @param selectedR : selected Robot
	 * @param layout : current layout
	 * @see Robot
	 * @see Springlayout
	 */
	private void loadingRobots(Robot selectedR, SpringLayout layout) {
		Color color;
		ImageIcon icon;
		int x;
		int y;
		int originX;
		int originY;


		for(Robot r : robots) {
			color = r.getColor();
			x = r.getX();
			y = r.getY();
			originX = r.getOriginX();
			originY = r.getOriginY();
			
			icon = new ImageIcon(themePath+"robots/robot"+color+".png");
			JLabel labelRobot = imageShow(layout, icon, x*Constant.caseSize, y*Constant.caseSize, "West", "North", contentPane);
			contentPane.add(labelRobot);
			
			icon = new ImageIcon(themePath+"box/Selection.png");
			if (selectedR == r)
			{
				JLabel labelSelect = imageShow(layout, icon, x*Constant.caseSize, y*Constant.caseSize, "West", "North", contentPane);
				contentPane.add(labelSelect);
			}

			labelRobot.addMouseListener(new ClickOnRobotListener(controller, r,this));

			icon = new ImageIcon(themePath+"box/Start"+color+".png");
			labelRobot = imageShow(layout, icon, originX*Constant.caseSize, originY*Constant.caseSize, "West", "North", contentPane);
			contentPane.add(labelRobot);
		}
	}

	/**
	 * After a movement, updates the list of robots and redraw the view
	 * @param r : list of Robots
	 * @see Robot
	 */
	public void updateRobotPositions(List<Robot> r) {
		robots = r;	
		redrawContentPane();
	}

	/**
	 * Redraw the view
	 */
	public void redrawContentPane() {
		initContentPane();
		buildContentPane();

	}
}

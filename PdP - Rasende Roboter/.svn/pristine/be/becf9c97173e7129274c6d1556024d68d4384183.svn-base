package userInterface;


import game.Box;
import game.Constant;
import game.Game;
import game.Robot;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Insets;
import java.text.NumberFormat;

import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;

import launcher.Controller;


/**
 * @author Dimitri
 * @version 1
 */
public class RasendeFrame extends JFrame {
	/**
	 * 
	 */
	private static final long serialVersionUID = 4716072661083101699L;
	private JPanel contentPane, mBoardPanel,mColumnPanel, mHelpPanel;
	private JLabel mLabelRound, mLabelMove;

	/**
	 * Constructor of the class
	 * @param c : Controller
	 */
	public RasendeFrame(Controller controller){
		super();

		setSize(Constant.FRAME_WIDTH, Constant.FRAME_HEIGHT);
		setTitle(Constant.FRAME_TITLE);
		
		setResizable(false);
		setLocationRelativeTo(null);
		setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		
		addWindowListener(controller);
		buildJMenu(controller);
	}

	public void buildGameScreen(Controller controller) {

		contentPane = new JPanel();
		contentPane.setLayout(new BoxLayout(contentPane, BoxLayout.LINE_AXIS));
		
		mColumnPanel = new JPanel();
		mColumnPanel.setBackground(java.awt.Color.WHITE);
		mColumnPanel.setLayout(new BoxLayout(mColumnPanel, BoxLayout.PAGE_AXIS));
		mColumnPanel.setPreferredSize(new Dimension(Constant.COLUMN_WIDTH,Constant.BOARD_SIZE));
		contentPane.add(mColumnPanel);
		
		mBoardPanel = new JPanel();
		mBoardPanel.setBackground(java.awt.Color.WHITE);
		mBoardPanel.setLayout(new GridLayout(Constant.NB_BOXES, Constant.NB_BOXES));
		mBoardPanel.setPreferredSize(new Dimension(Constant.BOARD_SIZE,Constant.BOARD_SIZE));
		mBoardPanel.addMouseListener(controller);
		contentPane.add(mBoardPanel);	
		contentPane.addKeyListener(controller);
		contentPane.setFocusable(true);
		contentPane.requestFocusInWindow();
		
		buildColumn(controller);
		createHelp(controller);
		
		setContentPane(contentPane);
	}
	
	public void buildJMenu(Controller controller) {
		JMenuBar menuBar = new JMenuBar();
		JMenu menu;
		JMenuItem menuItem;

		menu = new JMenu("Game");
		menuBar.add(menu);

		menuItem = new JMenuItem("New Game");
		menuItem.addActionListener(controller);
		menu.add(menuItem);

		menuItem = new JMenuItem("Help");
		menuItem.addActionListener(controller);
		menu.add(menuItem);		
		
		menu.addSeparator();

		menuItem = new JMenuItem("Quit");
		menuItem.addActionListener(controller);
		menu.add(menuItem);		

		menu = new JMenu("Online");
		menu.addActionListener(controller);
		menuBar.add(menu);
		
		menuItem = new JMenuItem("Join Server");
		menuItem.addActionListener(controller);
		menu.add(menuItem);
		
		menu.addSeparator();
		
		menuItem = new JMenuItem("Start Server");
		menuItem.addActionListener(controller);
		menu.add(menuItem);

		setJMenuBar(menuBar);
	}
	
	private void buildColumn(Controller controller){
		mLabelRound = new JLabel("Current Round: " + 0 + "/17");
		mColumnPanel.add(mLabelRound);
		
		mLabelMove = new JLabel("Movements: " + 0);
		mColumnPanel.add(mLabelMove);

		JLabel labelTF= new JLabel("Movements' number:");
		mColumnPanel.add(labelTF);

		JFormattedTextField tf = new JFormattedTextField(NumberFormat.getIntegerInstance());
		mColumnPanel.add(tf);

		JButton validateButton = new JButton("Validate");
		validateButton.addActionListener(controller);
		mColumnPanel.add(validateButton);

		JPanel jp = new JPanel();
		jp.setLayout(new BoxLayout(jp, BoxLayout.LINE_AXIS));
		JButton backMovement = new JButton("<");
		backMovement.addActionListener(controller);
		jp.add(backMovement);
		JButton nextMovement = new JButton(">");
		nextMovement.addActionListener(controller);
		jp.add(nextMovement);
		mColumnPanel.add(jp);

		JButton solveButton = new JButton("Solution");
		solveButton.addActionListener(controller);
		mColumnPanel.add(solveButton);
		
		JPanel console = new JPanel();
		console.setLayout(new BoxLayout(console, BoxLayout.PAGE_AXIS));
		console.add(new JLabel("Console ?"));
		
		JPanel jpTxtField = new JPanel();
		jpTxtField.setLayout(new BoxLayout(jpTxtField, BoxLayout.LINE_AXIS));
		jpTxtField.add(new JTextField(Constant.COLUMN_WIDTH));
		
		console.add(jpTxtField);
		mColumnPanel.add(console);		
	}
	
	public void refresh(Game model){
		contentPane.removeAll();
		refreshBoard(model);
		refreshColumn(model);
		contentPane.add(mColumnPanel);
		contentPane.add(mBoardPanel);
		setContentPane(contentPane);
	}
	
	public void refreshColumn(Game model){
		mLabelRound.setText("Current Round: " + model.getCurrentRound() + "/17");		
		mLabelMove.setText("Movements: " + model.getCounterLap());
	}

	/**
	 * 
	 */
	public void refreshBoard(Game model){
		mBoardPanel.removeAll();
				
		Box[][] board = model.getBoard().getGameBoard();
				
		for(int i=0; i<Constant.NB_BOXES; i++){
			for(int j=0; j<Constant.NB_BOXES; j++){
				Robot current = null, origin = null;
				for(Robot r : model.getRobots()){
					if(r.getX() == j && r.getY() == i){
						current = r;
					}
					if(r.getOriginX() == j && r.getOriginY() == i){
						origin = r;
					}
				}				
				mBoardPanel.add(board[i][j].getJPanel(current, (current == model.getSelectedRobot()),origin, model.getGoalCard()));
			}
		}		
		mBoardPanel.validate();
	}
	
	public void createHelp(Controller controller)
	{
		 
		mHelpPanel = new JPanel();
		mHelpPanel.setBackground(java.awt.Color.WHITE);
		mHelpPanel.setLayout(new BoxLayout(mHelpPanel, BoxLayout.Y_AXIS));
		mHelpPanel.setPreferredSize(new Dimension(Constant.FRAME_WIDTH,Constant.FRAME_HEIGHT));
		
		JLabel mLabelTitle = new JLabel("HELP");
		mLabelTitle.setAlignmentX(Component.CENTER_ALIGNMENT);
		mHelpPanel.add(mLabelTitle);
		
		
		JTextArea textArea = new JTextArea(
			"I) General Principle\n"+
			"The game consists of a board of 16 * 16 boxes and four robots of different colors (red, green, blue, yellow).\n"+
			"Some boxes have a type corresponding to the different objectives with robots. There are four types of patterns, each time declined in the four colors for each of the robots.\n"+
			"In addition to these 16 boxes objectives, there is a special multicolored box can be reached by any of the robots.\n\n"+
			"II) Movements\n"+ 
			"To select a robot, you must use he mouse or the keyboard (R, G, B or Y, depending on color).\n"+
			"The robots move in a straight line and only stop when they encounter an obstacle (another robot, card edge or wall).\n"+
			"To move the robot must use the arrow keys or the mouse to click on the column or row in the direction where you want to go.\n\n"+
			"III) Scoring\n"+
			"With a solo game, the goal is to reach the 17 boxes with less movement possible.\n"+
			"With a multiplayer game, when a player thinks he has found a solution, he recorded his proposed number of movements: from this moment other players have one minute to find a better solution.\n"+
			"At the end of the allowed time, the one who had the best solution must show his solution to others. If he succeeds, he wins the round. Otherwise it is the second to show its solution and so on.\n\n"+
			"The winner is the one who won the largest number of rounds."
			);
		 textArea.setMargin(new Insets(10, 10, 10, 10));
		 textArea.setSize(Constant.FRAME_WIDTH-20, Constant.FRAME_HEIGHT-100);
		 textArea.setEditable(false);
	     textArea.setLineWrap(true);
	     textArea.setWrapStyleWord(true);
	     textArea.setAlignmentX(Component.CENTER_ALIGNMENT);
	     mHelpPanel.add(textArea);
	     
	     JButton returnGame = new JButton("Return Game");
	     returnGame.setAlignmentX(Component.CENTER_ALIGNMENT);
	     returnGame.addActionListener(controller);
		 mHelpPanel.add(returnGame);

	}

	public void refreshHelp(){
		contentPane.removeAll();
	    contentPane.add(mHelpPanel);
	    setContentPane(contentPane);
	 
	}
}

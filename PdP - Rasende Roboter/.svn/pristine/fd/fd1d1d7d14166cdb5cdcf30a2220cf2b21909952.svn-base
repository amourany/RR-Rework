package game;

import game.Constant.BoxType;
import game.Constant.Color;
import game.Constant.Direction;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

import solverAlgorithm.Solver;


/**
 * The model of our architecture
 */
public class Game {
	private Board mBoard;
	private List<Robot> mRobots;
	private int mCounterLap;
	private Stack<List<Robot>> mPreviousPosition;
	private Stack<List<Robot>> mNextPosition;
	private Robot mSelectedRobot;
	private Stack<Box> mGoalCard;
	private Solver mSolver;

	/**
	 * Construtor of Model
	 */
	public Game() {
		

	}

	public void startNewGame(){
		//generateBoard();
		mBoard = new Board();
		oppositeWall();
		
		mRobots = new ArrayList<Robot>();
		for(Color c : Constant.Color.values()){
			Robot r = new Robot(c);
			r = r.placeOnBoard(mRobots);
			mRobots.add(r);
		}	

		mGoalCard = new Stack<Box>();
		
		//Création d'un tableau qui contient toutes les cartes possibles
		int i = 0;
		Box [] goalCardTab = new Box[17];
		for(Color c : Color.values()){
			for(BoxType bt : BoxType.values()){
				if(bt != BoxType.Central && bt != BoxType.Empty && bt != BoxType.Multi){
					goalCardTab[i] = new Box(bt, c);
					i++;
				}
			}
		}
		goalCardTab[i] = new Box(BoxType.Multi, null);
		
		//Ajout aléatoire des cartes dans la pile
		for (int j = 17; j > 0; j--){
			int k = (int)(Math.random()*100) % j;
			mGoalCard.push(goalCardTab[k]);
			if (k != (j-1)){
				Box tmp = goalCardTab[j-1];
				goalCardTab[j-1] = goalCardTab[k];
				goalCardTab[k] = tmp;
			}
		}
			
		mGoalCard.push(new Box(BoxType.Empty, null));

		startNewLap();
	}

	private void startNewLap(){
		if(mGoalCard.empty()) {
			System.out.println("Parti terminée !!!");
		}
		else{
			mCounterLap = 0;

			mPreviousPosition = new Stack<List<Robot>>();
			mNextPosition = new Stack<List<Robot>>();

			mGoalCard.pop();
		}
	}

	/**
	 * Getter of gameBoard
	 * @return gameBoard : Board
	 * @see Board
	 */
	public Board getBoard() {
		return mBoard;
	}

	/**
	 * Getter of the robots' list
	 * @return robots : the list of robots
	 * @see Robot
	 * @see List
	 */
	public List<Robot> getRobots() {
		return mRobots;
	}

	/**
	 * Return the robot with the specified Color
	 * @param c : Color, the color of the robot asked
	 * @return r : Robot, if the robot with this color exist, else null
	 * @see Color
	 * @see Robot
	 */
	public Robot getRobot(Color c) {
		for(Robot r : mRobots) {
			if(r.getColor() == c)
				return r;
		}
		return null;
	}

	/**
	 * Setter of the robots' list
	 * @param robots
	 * @see Robot
	 * @see List
	 */
	public void setRobots(List<Robot> robots) {
		mRobots = robots;
	}

	/**
	 * Getter of Current Round
	 * @return currentRound : int
	 */
	public int getCurrentRound(){
		return 17 - mGoalCard.size();
	}

	public void loadPreviousPosition(){
		if(mPreviousPosition == null)
			mPreviousPosition = new Stack<List<Robot>>();

		if(!mPreviousPosition.empty()){
			List<Robot> robot = new ArrayList<Robot>(mPreviousPosition.pop());

			mRobots = robot;

			if(mNextPosition == null)
				mNextPosition = new Stack<List<Robot>>();

			mNextPosition.push(new ArrayList<Robot>(robot));

			mCounterLap--;
		}
	}

	private void saveCurrentPosition(){
		if(mPreviousPosition == null)
			mPreviousPosition = new Stack<List<Robot>>();

		mPreviousPosition.push(new ArrayList<Robot>(mRobots));

		mCounterLap++;
	}

	public void loadNextPosition(){
		if(mNextPosition == null)
			mNextPosition = new Stack<List<Robot>>();

		if(!mNextPosition.empty()){
			List<Robot> robot = new ArrayList<Robot>(mNextPosition.pop());
			mRobots = new ArrayList<Robot>(robot);

			if(mPreviousPosition == null)
				mPreviousPosition = new Stack<List<Robot>>();

			mPreviousPosition.push(new ArrayList<Robot>(robot));

			mCounterLap++;
		}
	}

	/**
	 * Default boxes are empty. Then we change type and color of the special boxes.
	 */
	private void generateBoard(){
		mBoard = new Board();
		mBoard.initboard();

		//Walls around the board
		for (int i = 0; i < Constant.NB_BOXES; i++) {
			//Walls on the top
			mBoard.getGameBoard()[0][i].setWall(Direction.Up);
			//Walls on the bottom
			mBoard.getGameBoard()[Constant.NB_BOXES-1][i].setWall(Direction.Down);
			//Walls ont the left
			mBoard.getGameBoard()[i][0].setWall(Direction.Left);
			//Walls ont the right
			mBoard.getGameBoard()[i][Constant.NB_BOXES-1].setWall(Direction.Right);
		}	

		//Central Box
		mBoard.getGameBoard()[7][7].setWall(Direction.Up);
		mBoard.getGameBoard()[7][7].setWall(Direction.Left);

		mBoard.getGameBoard()[7][8].setWall(Direction.Up);
		mBoard.getGameBoard()[7][8].setWall(Direction.Right);

		mBoard.getGameBoard()[8][7].setWall(Direction.Down);
		mBoard.getGameBoard()[8][7].setWall(Direction.Left);

		mBoard.getGameBoard()[8][8].setWall(Direction.Down);
		mBoard.getGameBoard()[8][8].setWall(Direction.Right);

		mBoard.getGameBoard()[7][7].setType(BoxType.Central, null);
		mBoard.getGameBoard()[7][8].setType(BoxType.Central, null);
		mBoard.getGameBoard()[8][7].setType(BoxType.Central, null);
		mBoard.getGameBoard()[8][8].setType(BoxType.Central, null);

		//Construction du plateau
		mBoard.getGameBoard()[0][3].setWall(Direction.Right);
		mBoard.getGameBoard()[0][11].setWall(Direction.Right);
		mBoard.getGameBoard()[1][13].setWall(Direction.Left);
		mBoard.getGameBoard()[1][13].setWall(Direction.Up);
		mBoard.getGameBoard()[2][5].setWall(Direction.Right);
		mBoard.getGameBoard()[2][5].setWall(Direction.Down);
		mBoard.getGameBoard()[2][9].setWall(Direction.Right);
		mBoard.getGameBoard()[2][9].setWall(Direction.Down);
		mBoard.getGameBoard()[4][0].setWall(Direction.Down);
		mBoard.getGameBoard()[4][2].setWall(Direction.Up);
		mBoard.getGameBoard()[4][2].setWall(Direction.Right);
		mBoard.getGameBoard()[4][15].setWall(Direction.Up);
		mBoard.getGameBoard()[5][7].setWall(Direction.Left);
		mBoard.getGameBoard()[5][7].setWall(Direction.Down);
		mBoard.getGameBoard()[5][14].setWall(Direction.Left);
		mBoard.getGameBoard()[5][14].setWall(Direction.Down);
		mBoard.getGameBoard()[6][1].setWall(Direction.Left);
		mBoard.getGameBoard()[6][1].setWall(Direction.Up);
		mBoard.getGameBoard()[6][11].setWall(Direction.Right);
		mBoard.getGameBoard()[6][11].setWall(Direction.Up);
		mBoard.getGameBoard()[8][5].setWall(Direction.Right);
		mBoard.getGameBoard()[8][5].setWall(Direction.Up);		
		mBoard.getGameBoard()[9][1].setWall(Direction.Down);
		mBoard.getGameBoard()[9][1].setWall(Direction.Right);
		mBoard.getGameBoard()[9][12].setWall(Direction.Up);
		mBoard.getGameBoard()[9][12].setWall(Direction.Right);
		mBoard.getGameBoard()[9][15].setWall(Direction.Down);
		mBoard.getGameBoard()[10][4].setWall(Direction.Left);
		mBoard.getGameBoard()[10][4].setWall(Direction.Down);
		mBoard.getGameBoard()[11][0].setWall(Direction.Down);
		mBoard.getGameBoard()[12][9].setWall(Direction.Left);
		mBoard.getGameBoard()[12][9].setWall(Direction.Up);
		mBoard.getGameBoard()[13][5].setWall(Direction.Up);
		mBoard.getGameBoard()[13][5].setWall(Direction.Right);
		mBoard.getGameBoard()[13][14].setWall(Direction.Left);
		mBoard.getGameBoard()[13][14].setWall(Direction.Down);
		mBoard.getGameBoard()[14][3].setWall(Direction.Left);
		mBoard.getGameBoard()[14][3].setWall(Direction.Up);
		mBoard.getGameBoard()[14][11].setWall(Direction.Down);
		mBoard.getGameBoard()[14][11].setWall(Direction.Right);
		mBoard.getGameBoard()[15][6].setWall(Direction.Right);
		mBoard.getGameBoard()[15][13].setWall(Direction.Right);

		mBoard.getGameBoard()[2][9].setType(BoxType.Triangle, Color.Blue);
		mBoard.getGameBoard()[5][7].setType(BoxType.Triangle, Color.Red);
		mBoard.getGameBoard()[13][14].setType(BoxType.Triangle, Color.Green);
		mBoard.getGameBoard()[14][3].setType(BoxType.Triangle, Color.Yellow);

		mBoard.getGameBoard()[9][1].setType(BoxType.Sun, Color.Blue);
		mBoard.getGameBoard()[14][11].setType(BoxType.Sun, Color.Red);
		mBoard.getGameBoard()[4][2].setType(BoxType.Sun, Color.Green);
		mBoard.getGameBoard()[6][11].setType(BoxType.Sun, Color.Yellow);

		mBoard.getGameBoard()[2][5].setType(BoxType.More, Color.Blue);
		mBoard.getGameBoard()[13][5].setType(BoxType.More, Color.Red);
		mBoard.getGameBoard()[5][14].setType(BoxType.More, Color.Green);
		mBoard.getGameBoard()[12][9].setType(BoxType.More, Color.Yellow);

		mBoard.getGameBoard()[9][12].setType(BoxType.Diamond, Color.Blue);
		mBoard.getGameBoard()[1][13].setType(BoxType.Diamond, Color.Red);
		mBoard.getGameBoard()[10][4].setType(BoxType.Diamond, Color.Green);
		mBoard.getGameBoard()[6][1].setType(BoxType.Diamond, Color.Yellow);

		mBoard.getGameBoard()[8][5].setType(BoxType.Multi, null);

		oppositeWall();
	}

	/**
	 * Move a robot in a direction
	 * @param robot : the robot to move
	 * @param direction : Left, Right, Down, Up
	 * @see Direction
	 * @see Robot
	 */
	public void moveSelectedRobot(Direction direction){
		saveCurrentPosition();

		Robot robot = mBoard.getNewPosition(mSelectedRobot, direction, mRobots);

		for(Robot r : mRobots){
			if(r.getColor() == mSelectedRobot.getColor()){
				r.x = robot.x;
				r.y = robot.y;

				mSelectedRobot = r;
			}
		}
		
			if (mBoard.getGameBoard()[mSelectedRobot.y][mSelectedRobot.x].getType() == getGoalCard().getType()
				&&	getGoalCard().getType() == BoxType.Multi){
					// TODO Ajouter un point !!!
					startNewLap();
			}
			else{
				if (mBoard.getGameBoard()[mSelectedRobot.y][mSelectedRobot.x].getType() == getGoalCard().getType()
						&& mBoard.getGameBoard()[mSelectedRobot.y][mSelectedRobot.x].getColor() == getGoalCard().getColor()
						&& mSelectedRobot.getColor() == getGoalCard().getColor()){					
						// TODO Ajouter un point !!!
						startNewLap();
				}
			}
	}
	

	/**
	 * Build the opposite wall
	 * Example :If the north wall of a box exist then the south wall of the box above must be built
	 */
	public void oppositeWall(){
		for(int i=0 ; i<Constant.NB_BOXES ; i++){
			for(int j=0 ; j<Constant.NB_BOXES ; j++){
				if(mBoard.getGameBoard()[i][j].isEast() && j != Constant.NB_BOXES-1){
					mBoard.getGameBoard()[i][j+1].setWest(true);
				}
				if(mBoard.getGameBoard()[i][j].isWest() && j != 0){
					mBoard.getGameBoard()[i][j-1].setEast(true);
				}
				if(mBoard.getGameBoard()[i][j].isNorth() && i != 0){
					mBoard.getGameBoard()[i-1][j].setSouth(true);
				}
				if(mBoard.getGameBoard()[i][j].isSouth() && i != Constant.NB_BOXES-1){
					mBoard.getGameBoard()[i+1][j].setNorth(true);
				}
			}
		}
	}

	public Box getGoalCard() {
		if(!mGoalCard.empty())
			return mGoalCard.peek();
		return null;
	}

	public Robot getSelectedRobot() {
		return mSelectedRobot;
	}

	public void setSelectedRobot(Robot selectedRobot) {
		mSelectedRobot = selectedRobot;
	}

	public void setSelectedRobot(Color color){
		for(Robot r : mRobots)
			if(r.getColor() == color)
				mSelectedRobot = r;
	}

	public int getCounterLap(){
		return mCounterLap;
	}

	public void startSolver(){
		if (mSolver == null)
			mSolver = new Solver();
		mSolver.startFindSolution(mBoard, mRobots, getGoalCard());
	}
}
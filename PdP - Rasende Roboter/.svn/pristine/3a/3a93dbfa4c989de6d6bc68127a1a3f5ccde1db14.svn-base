package network;

import game.BoardPiece;
import game.Box;
import game.Constant;
import game.Countdown;
import game.Game;
import game.Player;
import game.Robot;
import game.Constant.Color;
import game.Constant.Direction;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

import launcher.Controller;

/**
 * Server side of the application
 */
public class Server {
	private Game game;
	private List<Player> players;
	private DatagramSocket socket;
	private Controller controller;
	private String username;
	
	private Thread serverThread = new Thread() {
		public void run() {
			listen();
		}
	};
	
	public Server(Controller controller,String pseudo)
	{
		game = new Game();
		
		Countdown count = new Countdown(controller);
		count.createCountdown();
		game.newCountdown(count);
		game.startNewGame();
		
		players = new ArrayList<Player>();
		username = pseudo;
		this.controller = controller;
		
		try {
			socket = new DatagramSocket(Constant.SERVER_PORT);
			Player p=new Player(socket.getInetAddress(),username);
			p.setHost(true);
			players.add(p);
			System.out.println("The server is launched! ");
			this.controller.refreshPlayers(p.getPseudo()+" : "+String.valueOf(p.getPoints())+"pts\n");
			this.controller.refreshColumn();
		} catch (SocketException e) {
			e.printStackTrace();
		}
		
		serverThread.start();		
	}
	
	/**
	 * Listen for the data from clients
	 */
	private void listen() {
		String data;
		String[] splitData = new String[10];
		
		try {
			byte[] buffer = new byte[1500];
			DatagramPacket packet = new DatagramPacket(buffer, buffer.length);
			
			while(true) {
				socket.receive(packet);
				data = new String(packet.getData(), 0, packet.getLength());
				splitData = data.split("&");
				switch(splitData[0]) {
				case "connect":
					players.add(new Player(packet.getAddress(),splitData[1]));
					sendBoard(packet.getAddress());
					sendRobots(packet.getAddress());
					sendCard(packet.getAddress());
					updatePlayers();	
					break;
				}
				
				//System.out.println("Received : " + data + " from : " + packet.getAddress());
				process(data);
			}
		} catch (SocketException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Updates the list of players for the server and all clients
	 */
	private void updatePlayers() {
		
		String data = "";
		
		for(Player p : players) {
		data=data+p.getPseudo()+" : "+p.getPoints()+"pts\n" ;
		}
		
			//Update
			for(Player p2 : players) {
				//If client
				if (!p2.isHost())
				{
					data="client&"+data;
					byte[] dataBytes = data.getBytes();
					DatagramPacket packet = new DatagramPacket(dataBytes, dataBytes.length, p2.getIp(), Constant.CLIENT_PORT);
					packet.setData(dataBytes);
				
					try {
						socket.send(packet);
					} catch (IOException e) {
						e.printStackTrace();
					}		
				}
				//If Server
				else if(p2.isHost())
				{
					controller.refreshPlayers(data);
				}
			}	
	}

	private void process(String data) {
		String[] splitData = new String[10];
		splitData = data.split("&");
		Color c;
		Direction d;
		
		switch(splitData[0]) {
			case "move":
				c = Color.valueOf(splitData[1]);
				d = Direction.valueOf(splitData[2]);
				controller.getgame().setSelectedRobot(c);
				controller.getgame().moveSelectedRobot(d);
				controller.refreshBoard();
				controller.refreshColumn();
				
				sendUpdates(c,d);
				
				break;
			default:
				System.out.println("Flag inconnu");
				break;
		}
		
	}

	/**
	 * Send the new board to client
	 * @param ip : InetAddress
	 */
	private void sendBoard(InetAddress ip) {
		try {	
			String boardInfo;
			
			for(BoardPiece bp : game.getBoard().getBoardPiece()) {
				boardInfo = Langage.encodeBoard(bp);
				
				byte[] boardInfoBytes = boardInfo.getBytes();
				DatagramPacket packet = new DatagramPacket(boardInfoBytes, boardInfoBytes.length, ip, Constant.CLIENT_PORT);
				packet.setData(boardInfoBytes);
				
				socket.send(packet);
				
			}
		} catch (SocketException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	private void sendCard(InetAddress ip) {
		try {	
			
			Stack<Box> tmp = (Stack<Box>) getGame().getStack().clone();
			Box [] tmpTab = new Box[17];
			int i=16;
			while (!tmp.isEmpty()){
				tmpTab[i] = tmp.pop();
				i--;
			}
			for (int j = 0; j<17;j++){
				if (tmpTab[j]!=null){
					String cardInfo = "card&" + tmpTab[j].getType() +
							"&" + tmpTab[j].getColor();
					byte[] cardInfoBytes = cardInfo.getBytes();
					DatagramPacket packet = new DatagramPacket(cardInfoBytes, cardInfoBytes.length, ip, Constant.CLIENT_PORT);
					packet.setData(cardInfoBytes);
				
					socket.send(packet);
				}
				
			}
		} catch (SocketException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Send the starting position of all the robots
	 * @param ip : InetAddress
	 */
	private void sendRobots(InetAddress ip) {
		try {	
			String robotInfo;
			for(Robot r : game.getRobots()) {
				robotInfo = Langage.encodeRobot(r);
				
				byte[] robotInfoBytes = robotInfo.getBytes();
				DatagramPacket packet = new DatagramPacket(robotInfoBytes, robotInfoBytes.length, ip, Constant.CLIENT_PORT);
				packet.setData(robotInfoBytes);
				
				socket.send(packet);
			}
			
			

		} catch (SocketException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Ask all clients to refresh their screen
	 * @param ip : InetAddress
	 */
	private void sendRefresh(InetAddress ip) {
		String data = "refresh";
		byte[] dataBytes = data.getBytes();
		DatagramPacket packet = new DatagramPacket(dataBytes, dataBytes.length, ip, Constant.CLIENT_PORT);
		packet.setData(dataBytes);
		
		try {
			socket.send(packet);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Send Updates to all clients when there is a movement
	 * @param color : the color of robot to move
	 * @param d : the direction
	 * @see Color
	 * @see Direction
	 */
	public void sendUpdates(Color color, Direction d) {
		
		for(Player p : players) { 
			
			if(!p.isHost())
			{
				String data = "move&" + color +
						"&" + d ;
				
				byte[] dataBytes = data.getBytes();
				DatagramPacket packet = new DatagramPacket(dataBytes, dataBytes.length, p.getIp(), Constant.CLIENT_PORT);
				packet.setData(dataBytes);
				
				try {
					socket.send(packet);
				} catch (IOException e) {
					e.printStackTrace();
				}		
					sendRefresh(p.getIp());
			}
		}
	}

	public Game getGame() {
		return game;
	}
	public void setGame(Game game) {
		this.game = game;
	}
	
	public List<Player> getPlayers() {
		return players;
	}

	public void setPlayers(List<Player> players) {
		this.players = players;
	}
}
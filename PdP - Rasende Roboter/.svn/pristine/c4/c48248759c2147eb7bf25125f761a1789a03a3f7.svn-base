package model;

import java.util.ArrayList;
import java.util.List;

/**
 * The model of our architecture
 */
public class Model {
	/**
	 * @see Board
	 */
	private Board gameBoard;
	/**
	 * @see List
	 * @see Robot
	 */
	private List<Robot> robots;
	/**
	 * @see List
	 * @see Player
	 */
	private List<Player> players;
	private int currentRound;
	
	/**
	 * Construtor of Model
	 */
	public Model() {
		this.currentRound = 1;
		this.gameBoard = new Board();
		this.robots = new ArrayList<Robot>();
		this.players = new ArrayList<Player>();
		createPlayer(); //To create the first player
	}

	/**
	 * Getter of gameBoard
	 * @return gameBoard : Board
	 * @see Board
	 */
	public Board getGameBoard() {
		return gameBoard;
	}

	/**
	 * Setter of gameBoard
	 * @param gameBoard
	 * @see Board
	 */
	public void setGameBoard(Board gameBoard) {
		this.gameBoard = gameBoard;
	}

	/**
	 * Getter of the robots' list
	 * @return robots : the list of robots
	 * @see Robot
	 * @see List
	 */
	public List<Robot> getRobots() {
		return robots;
	}

	/**
	 * Return the robot with the specified BoxColor
	 * @param c : BoxColor, the color of the robot asked
	 * @return r : Robot, if the robot with this color exist, else null
	 * @see BoxColor
	 * @see Robot
	 */
	public Robot getRobotByColor(BoxColor c) {
		for(Robot r : robots) {
			if(r.getColor() == c)
				return r;
		}
		return null;
	}
	
	/**
	 * Setter of the robots' list
	 * @param robots
	 * @see Robot
	 * @see List
	 */
	public void setRobots(List<Robot> robots) {
		this.robots = robots;
	}


	/**
	 * Getter of the players' list
	 * @return players
	 * @see Player
	 * @see List
	 */
	public List<Player> getPlayers() {
		return players;
	}

	/**
	 * Setter of the players' list
	 * @param players
	 */
	public void setPlayers(List<Player> players) {
		this.players = players;
	}

	/**
	 * Getter of Current Round
	 * @return currentRound : int
	 */
	public int getCurrentRound() {
		return currentRound;
	}

	/**
	 * Setter of Current Round
	 * @param currentRound : int
	 */
	public void setCurrentRound(int currentRound) {
		this.currentRound = currentRound;
	}
	


	
	
	/**
	 * Default boxes are empty. Then we change type and color of the special boxes.
	 */
	public void generateBoard()
	{
		robots = new ArrayList<Robot>();
		gameBoard = new Board();
		
		//Robot test
		Robot r = new Robot(BoxColor.Blue);
		r = r.placeOnBoard(robots);
		robots.add(r);
		
		r = new Robot(BoxColor.Green);
		r = r.placeOnBoard(robots);
		robots.add(r);
		
		r = new Robot(BoxColor.Yellow);
		r = r.placeOnBoard(robots);
		robots.add(r);
		
		r = new Robot(BoxColor.Red);
		r = r.placeOnBoard(robots);
		robots.add(r);
		
		//Walls around the board
		for (int i = 0; i < gameBoard.board_size; i++) {
			//Walls on the top
			gameBoard.getBox()[0][i].setWall(Direction.Up);
			//Walls on the bottom
			gameBoard.getBox()[gameBoard.board_size-1][i].setWall(Direction.Down);
			//Walls ont the left
			gameBoard.getBox()[i][0].setWall(Direction.Left);
			//Walls ont the right
			gameBoard.getBox()[i][gameBoard.board_size-1].setWall(Direction.Right);
		}	
		
		//Central Box
		gameBoard.getBox()[7][7].setWall(Direction.Up);
		gameBoard.getBox()[7][7].setWall(Direction.Left);
		
		gameBoard.getBox()[7][8].setWall(Direction.Up);
		gameBoard.getBox()[7][8].setWall(Direction.Right);
		
		gameBoard.getBox()[8][7].setWall(Direction.Down);
		gameBoard.getBox()[8][7].setWall(Direction.Left);
		
		gameBoard.getBox()[8][8].setWall(Direction.Down);
		gameBoard.getBox()[8][8].setWall(Direction.Right);
				
		gameBoard.getBox()[7][7].setType(BoxType.Central);
		gameBoard.getBox()[7][8].setType(BoxType.Central);
		gameBoard.getBox()[8][7].setType(BoxType.Central);
		gameBoard.getBox()[8][8].setType(BoxType.Central);
		
		//More Boxes
		gameBoard.getBox()[0][4].setType(BoxType.More);
		gameBoard.getBox()[4][7].setType(BoxType.More);
		gameBoard.getBox()[12][2].setType(BoxType.More);
		gameBoard.getBox()[9][10].setType(BoxType.More);
		
		gameBoard.getBox()[0][4].setSouth(true);
		gameBoard.getBox()[4][7].setSouth(true);
		gameBoard.getBox()[0][4].setEast(true);
		gameBoard.getBox()[4][7].setEast(true);
		
		gameBoard.getBox()[12][2].setNorth(true);
		gameBoard.getBox()[9][10].setNorth(true);
		gameBoard.getBox()[12][2].setWest(true);
		gameBoard.getBox()[9][10].setWest(true);
		
		gameBoard.getBox()[0][4].setColor(BoxColor.Blue);
		gameBoard.getBox()[4][7].setColor(BoxColor.Green);
		gameBoard.getBox()[12][2].setColor(BoxColor.Yellow);
		gameBoard.getBox()[9][10].setColor(BoxColor.Red);
		
		oppositeWall();
	}

	/**
	 * Create a player and put it in the list
	 */
	public void createPlayer(){
		Player p=new Player();
		players.add(p);
	}
	
	/**
	 * Move a robot in a direction
	 * @param c : BoxColor, color of the robot to move
	 * @param direction : Left, Right, Down, Up
	 * @see Direction
	 * @see BoxColor
	 */
	public void move(BoxColor c, Direction direction){
		Robot r = getRobotByColor(c);
		while (gameBoard.getBox()[r.y][r.x].canContinue(direction) 
				&& !r.robotIsHere(r.x, r.y, robots, direction)) {
			switch (direction) {
			case Right :
				r.x++;
				break;
			case Left :
				r.x--;
				break;
			case Down :
				r.y++;
				break;
			case Up :
				r.y--;
				break;
			}
		}
	}
	
	/**
	 * Build the opposite wall
	 * Example :If the north wall of a box exist then the south wall of the box above must be built
	 */
	public void oppositeWall()
	{
		for(int i=0;i<gameBoard.getPlateau_size();i++)
		{
			for(int j=0;j<gameBoard.getPlateau_size();j++)
			{
				if(gameBoard.getBox()[i][j].isEast() && j != gameBoard.getPlateau_size()-1)
				{
						gameBoard.getBox()[i][j+1].setWest(true);
				}
				if(gameBoard.getBox()[i][j].isWest() && j != 0)
				{
						gameBoard.getBox()[i][j-1].setEast(true);
				}
				if(gameBoard.getBox()[i][j].isNorth() && i != 0)
				{
						gameBoard.getBox()[i-1][j].setSouth(true);
				}
				if(gameBoard.getBox()[i][j].isSouth() && i != gameBoard.getPlateau_size()-1)
				{
						gameBoard.getBox()[i+1][j].setNorth(true);
				}
			}
		}
	}

}

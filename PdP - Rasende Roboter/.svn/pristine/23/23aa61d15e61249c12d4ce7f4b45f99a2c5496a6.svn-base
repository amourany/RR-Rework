package userInterface;


import game.Box;
import game.Constant;
import game.Game;
import game.Robot;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.text.NumberFormat;

import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import launcher.Controller;

/**
 * The window of the application with all its components and views
 */
public class RasendeFrame extends JFrame {	
	
	private static final long serialVersionUID = 4716072661083101699L;
	
	private JPanel contentPane, mBoardPanel,mColumnPanel, mHelpPanel;
	private JLabel mLabelRound, mLabelMove, mLabelTime;
	private JTextArea mConsoleText, user;

	/**
	 * Constructor of the class
	 * @param c : Controller
	 */
	public RasendeFrame(Controller controller){
		super();

		setSize(Constant.FRAME_WIDTH, Constant.FRAME_HEIGHT);
		setTitle(Constant.FRAME_TITLE);
		
		setResizable(false);
		setLocationRelativeTo(null);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		addWindowListener(controller);
		buildJMenu(controller);
	}

	/**
	 * Build all Panels
	 * @param controller
	 * @see Controller
	 */
	public void buildGameScreen(Controller controller){
		contentPane = new JPanel();
		contentPane.setLayout(new BoxLayout(contentPane, BoxLayout.LINE_AXIS));
		
		mColumnPanel = new JPanel();
		mColumnPanel.setBackground(java.awt.Color.WHITE);
		mColumnPanel.setLayout(new BoxLayout(mColumnPanel, BoxLayout.Y_AXIS));
		mColumnPanel.setPreferredSize(new Dimension(Constant.COLUMN_WIDTH,Constant.BOARD_SIZE));
		contentPane.add(mColumnPanel);
		
		mBoardPanel = new JPanel();
		mBoardPanel.setBackground(java.awt.Color.WHITE);
		mBoardPanel.setLayout(new GridLayout(Constant.NB_BOXES, Constant.NB_BOXES));
		mBoardPanel.setPreferredSize(new Dimension(Constant.BOARD_SIZE,Constant.BOARD_SIZE));
		mBoardPanel.addMouseListener(controller);
		contentPane.add(mBoardPanel);	
		contentPane.addKeyListener(controller);
		contentPane.setFocusable(true);
		contentPaneFocus();
		
		buildColumn(controller);
		createHelp(controller);
		
		setContentPane(contentPane);
	}

	public void contentPaneFocus() {
		contentPane.requestFocusInWindow();
	}
	
	/**
	 * Build the Menu Bar with all items
	 * @param controller
	 * @see Controller
	 */
	public void buildJMenu(Controller controller) {
		JMenuBar menuBar = new JMenuBar();
		JMenu menu;
		JMenuItem menuItem;

		menu = new JMenu("Game");
		menuBar.add(menu);

		menuItem = new JMenuItem("New Game");
		menuItem.setActionCommand(Controller.ACTION_NEW_GAME);
		menuItem.addActionListener(controller);
		menu.add(menuItem);

		menuItem = new JMenuItem("Help");
		menuItem.setActionCommand(Controller.ACTION_HELP);
		menuItem.addActionListener(controller);
		menu.add(menuItem);		
		
		menuItem = new JMenuItem("License");
		menuItem.setActionCommand(Controller.ACTION_LICENSE);
		menuItem.addActionListener(controller);
		menu.add(menuItem);	
		
		menu.addSeparator();

		menuItem = new JMenuItem("Quit");
		menuItem.setActionCommand(Controller.ACTION_QUIT);
		menuItem.addActionListener(controller);
		menu.add(menuItem);		

		menu = new JMenu("Online");
		menu.addActionListener(controller);
		menuBar.add(menu);
		
		menuItem = new JMenuItem("Join Server");
		menuItem.setActionCommand(Controller.ACTION_JOIN_SERVER);
		menuItem.addActionListener(controller);
		menu.add(menuItem);
		
		menu.addSeparator();
		
		menuItem = new JMenuItem("Start Server");
		menuItem.setActionCommand(Controller.ACTION_START_SERVER);
		menuItem.addActionListener(controller);
		menu.add(menuItem);

		setJMenuBar(menuBar);
	}
	
	/**
	 * Build the left Column
	 * @param controller
	 * @see Controller
	 */
	private void buildColumn(Controller controller){
		mLabelRound = new JLabel("Current Round: " + 1 + "/17");
		mLabelRound.setAlignmentX(Component.CENTER_ALIGNMENT);
		mColumnPanel.add(mLabelRound);
		
		mLabelMove = new JLabel("Movements: " + 0);
		mLabelMove.setAlignmentX(Component.CENTER_ALIGNMENT);
		mColumnPanel.add(mLabelMove);
		
		mLabelTime = new JLabel("Countdown: " + Constant.TIMER +" sec");
		mLabelTime.setAlignmentX(Component.CENTER_ALIGNMENT);
		mColumnPanel.add(mLabelTime);
		
		//-------------------------------------------------------------
		// Number of movement proposed
		//-------------------------------------------------------------
		JPanel moveNB = new JPanel();
		moveNB.setBackground(java.awt.Color.WHITE);
		moveNB.setLayout(new FlowLayout());
		
		JLabel labelTF= new JLabel("Movements' number:");
		moveNB.add(labelTF);

		JFormattedTextField tf = new JFormattedTextField(NumberFormat.getIntegerInstance());
		tf.setPreferredSize(new Dimension(60,30));
		moveNB.add(tf);
		mColumnPanel.add(moveNB);
		
		JButton validateButton = new JButton("Validate");
		validateButton.setAlignmentX(Component.CENTER_ALIGNMENT);
		validateButton.addActionListener(controller);
		
		mColumnPanel.add(validateButton);

		//-------------------------------------------------------------
		// Previous - Next Movement
		//-------------------------------------------------------------
		JPanel jp = new JPanel();
		jp.setBackground(java.awt.Color.WHITE);
		jp.setLayout(new FlowLayout());
		JButton backMovement = new JButton("<");
		backMovement.setActionCommand(Controller.ACTION_PREVIOUS);
		backMovement.addActionListener(controller);
		jp.add(backMovement);
		JButton nextMovement = new JButton(">");
		nextMovement.setActionCommand(Controller.ACTION_NEXT);
		nextMovement.addActionListener(controller);
		jp.add(nextMovement);
		mColumnPanel.add(jp);

		
		//-------------------------------------------------------------
		// Solution
		//-------------------------------------------------------------
		JButton solveButton = new JButton("Solution");
		solveButton.setAlignmentX(Component.CENTER_ALIGNMENT);
		solveButton.setActionCommand(Controller.ACTION_SOLVE);
		solveButton.addActionListener(controller);
		mColumnPanel.add(solveButton);
		
		
		//-------------------------------------------------------------
		// Users
		//-------------------------------------------------------------
		
		JPanel userPanel = new JPanel();
		userPanel.setBackground(java.awt.Color.WHITE);
		userPanel.setLayout(new BoxLayout(userPanel, BoxLayout.PAGE_AXIS));
		userPanel.add(new JLabel("Users"));
		
		user = new JTextArea(); 
		user.setEditable(false);
		user.setLineWrap(true);
		
		JScrollPane scrollPane = new JScrollPane(user); 
		scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
		 
		userPanel.add(scrollPane);
		user.setRows(10);
		mColumnPanel.add(userPanel);	
		
		//-------------------------------------------------------------
		// Console
		//-------------------------------------------------------------
		JPanel console = new JPanel();
		console.setBackground(java.awt.Color.WHITE);
		console.setLayout(new BoxLayout(console, BoxLayout.PAGE_AXIS));
		console.add(new JLabel("Console"));
		
		mConsoleText = new JTextArea();
		mConsoleText.setEditable(false);
		mConsoleText.setLineWrap(true);
		
		JScrollPane scrollPane2 = new JScrollPane(mConsoleText); 
		scrollPane2.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
		 
		console.add(scrollPane2);
		mConsoleText.setRows(20);
		mColumnPanel.add(console);		
	}
	
	/**
	 * Remove all component and repaint it
	 * @param game : current game
	 * @see Game
	 */
	public void refresh(Game g){
		contentPane.removeAll();
		refreshBoard(g);
		refreshColumn(g);
		contentPane.add(mColumnPanel);
		contentPane.add(mBoardPanel);
		setContentPane(contentPane);
	}
	
	/**
	 * Repaint the left column
	 * @param g : Game
	 * @see Game
	 */
	public void refreshColumn(Game g){
		mLabelRound.setText("Current Round: " + g.getCurrentRound() + "/17");		
		mLabelMove.setText("Movements: " + g.getCounterLap());
		mLabelTime.setText("Countdown: " + g.getCount().getTime() + " sec");

	}
	
	/**
	 * Add the player list and points
	 * @param data : String containing the list of players
	 */
	public void refreshPlayers(String data) {
			user.setText(data);
	} 

	/**
	 * Repaint the Board
	 * We use a girdlayout to view the boxes
	 * @param game : current game
	 * @see Game
	 */
	public void refreshBoard(Game game){
		mBoardPanel.removeAll();
				
		Box[][] board = game.getBoard().getGameBoard();
				
		for(int i=0; i<Constant.NB_BOXES; i++){
			for(int j=0; j<Constant.NB_BOXES; j++){
				Robot current = null, origin = null;
				for(Robot r : game.getRobots()){
					if(r.getX() == j && r.getY() == i){
						current = r;
					}
					if(r.getOriginX() == j && r.getOriginY() == i){
						origin = r;
					}
				}				
				mBoardPanel.add(board[i][j].getJPanel(current, (current == game.getSelectedRobot()),origin, game.getGoalCard()));
			}
		}		
		mBoardPanel.validate();
	}
	
	/**
	 * Create HelpView
	 * @param controller
	 * @see Controller
	 */
	public void createHelp(Controller controller){
		 
		mHelpPanel = new JPanel();
		mHelpPanel.setBackground(java.awt.Color.WHITE);
		mHelpPanel.setLayout(new BoxLayout(mHelpPanel, BoxLayout.Y_AXIS));
		mHelpPanel.setPreferredSize(new Dimension(Constant.FRAME_WIDTH,Constant.FRAME_HEIGHT));
		
		JLabel mLabelTitle = new JLabel("HELP");
		mLabelTitle.setAlignmentX(Component.CENTER_ALIGNMENT);
		mHelpPanel.add(mLabelTitle);		
		
		JTextArea textArea = new JTextArea(
			"I) General Principle\n"+
			"The game consists of a board of 16 * 16 boxes and four robots of different colors (red, green, blue, yellow).\n"+
			"Some boxes have a type corresponding to the different objectives with robots. There are four types of patterns, each time declined in the four colors for each of the robots.\n"+
			"In addition to these 16 boxes objectives, there is a special multicolored box can be reached by any of the robots.\n\n"+
			"II) Movements\n"+ 
			"To select a robot, you must use he mouse or the keyboard (R, G, B or Y, depending on color).\n"+
			"The robots move in a straight line and only stop when they encounter an obstacle (another robot, card edge or wall).\n"+
			"To move the robot must use the arrow keys or the mouse to click on the column or row in the direction where you want to go.\n\n"+
			"III) Scoring\n"+
			"With a solo game, the goal is to reach the 17 boxes with less movement possible.\n"+
			"With a multiplayer game, when a player thinks he has found a solution, he recorded his proposed number of movements: from this moment other players have one minute to find a better solution.\n"+
			"At the end of the allowed time, the one who had the best solution must show his solution to others. If he succeeds, he wins the round. Otherwise it is the second to show its solution and so on.\n\n"+
			"The winner is the one who won the largest number of rounds."
			);
		 textArea.setMargin(new Insets(10, 10, 10, 10));
		 textArea.setSize(Constant.FRAME_WIDTH-20, Constant.FRAME_HEIGHT-100);
		 textArea.setEditable(false);
	     textArea.setLineWrap(true);
	     textArea.setWrapStyleWord(true);
	     textArea.setAlignmentX(Component.CENTER_ALIGNMENT);
	     mHelpPanel.add(textArea);
	     
	     JButton returnGame = new JButton("Return Game");
	     returnGame.setActionCommand(Controller.ACTION_RETURN_GAME);
	     returnGame.setAlignmentX(Component.CENTER_ALIGNMENT);
	     returnGame.addActionListener(controller);
		 mHelpPanel.add(returnGame);

	}

	/**
	 * Refresh the Help View
	 */
	public void refreshHelp(){
		contentPane.removeAll();
	    contentPane.add(mHelpPanel);
	    setContentPane(contentPane);
	 
	}
	
	/**
	 * Redirection of the console in graphic mode
	 * @param s : a String
	 */
	public void write(String s){
		mConsoleText.append(s);
		mConsoleText.setCaretPosition(mConsoleText.getDocument().getLength());
	}
}
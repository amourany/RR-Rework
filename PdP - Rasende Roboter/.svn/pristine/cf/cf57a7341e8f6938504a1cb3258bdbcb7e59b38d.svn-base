package controller;



import view.AbstractView;

import view.GameMenuView;
import view.HelpView;
import view.InGameView;
import view.OptionsView;

import javax.swing.JFrame;

import model.Box;
import model.Constant.Direction;
import model.Model;
import model.Robot;
import model.Constant.Color;
import model.Constant.BoxType;

public class Controller {
	private AbstractView view;
	private Model model;
	private JFrame frame;	
	/**
	 * The robot selected by the player
	 */
	private Robot selectedRobot;
	
	/* Carte objectif */
	private Box goalCardUsed;

	public Controller(JFrame f, Model m){
		frame = f;
		model = m;
		createGameMenuView();
	}

	public Model getModel() {
		return model;
	}

	public void setView(AbstractView v) {
		view = v;
	}

	/**
	 * Game menu methods 
	 */	
	public void createGameMenuView() {
		view = new GameMenuView(this, frame);
	}
	
	/**
	 * Options methods
	 */	
	public void createOptionsView() {
		view = new OptionsView(this, frame);
		model.generateBoard();
	}	
	
	/**
	 * In game methods	
	 */
	public void createInGameView() {
		selectedRobot = null;
		goalCardUsed = null;
		view = new InGameView(this, frame);
	}

	/**
	 * Method called when the user click on a robot 
	 */
	public void setSelectedRobot(Robot robot) {
		selectedRobot = robot;
	}
	
	/**
	 * 
	 * @return The robot selected by the player
	 */
	public Robot getSelectedRobot() {
		return selectedRobot;
	}

	/** 
	 * Method called when the user click on the board
	 * It moves the robot and update the view
	 * @param x, y : coordinates of the box clicked
	 */
	public void moveRobot(int x, int y) {		
		if((selectedRobot.x < x) && (selectedRobot.y == y))
			model.move(selectedRobot, Direction.Right);
		else if((selectedRobot.x > x) && (selectedRobot.y == y))
			model.move(selectedRobot, Direction.Left);
		else if((selectedRobot.x == x) && (selectedRobot.y < y))
			model.move(selectedRobot, Direction.Down);
		else if((selectedRobot.x == x) && (selectedRobot.y > y))
			model.move(selectedRobot, Direction.Up);
			
		((InGameView) view).updateRobotPositions(model.getRobots());
	}
	
	/**
	 * Help methods
	 */	
	public void createHelpView() {
		view = new HelpView(this, frame);
	}
	public BoxType initType (){
		int x = ((int) ((Math.random())*100))%5;
		switch (x){
			case 0:
				return BoxType.Sun;
			case 1:
				return BoxType.Diamond;
			case 2:
				return BoxType.More;
			case 3:
				return BoxType.Triangle;
			case 4:
				return BoxType.Multi;
	
		}
		return null;
	}
	
	
	public Color initColor (){
		int x = ((int) ((Math.random())*100))%4;
		switch (x){
			case 0:
				return Color.Blue;
			case 1:
				return Color.Yellow;
			case 2:
				return Color.Red;
			case 3:
				return Color.Green;
		}
		return null;
	}
	public Box initGoalCard(){
		goalCardUsed = new Box();
		goalCardUsed.setColor(initColor());
		goalCardUsed.setType(initType());
		return goalCardUsed;
	}
	
	public void setGoalCard(Box card) {
		goalCardUsed = card;
	}
	
	public Box getGoalCard() {
		return goalCardUsed;
	}
	
	public Boolean goalCardDone(){
		Box boxRobot = model.getGameBoard().getBox()[selectedRobot.getY()][selectedRobot.getX()];
		BoxType goalType = goalCardUsed.getType();
		if (goalType==BoxType.Multi){
			if (boxRobot.getType() == goalType)
				return true;
		}
		
		else {
			Color goalColor = goalCardUsed.getColor();
			if (boxRobot.getType() == goalType
					&& boxRobot.getColor() == goalColor
					&& selectedRobot.getColor() == goalColor)
				return true;
		}
		return false;
		
	}
	
}

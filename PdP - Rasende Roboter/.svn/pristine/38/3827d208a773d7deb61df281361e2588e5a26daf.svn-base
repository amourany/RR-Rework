package network;

import game.BoardPiece;
import game.Constant;
import game.Constant.Color;
import game.Constant.Direction;
import game.Robot;

import java.io.File;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.util.ArrayList;
import java.util.List;

import launcher.Controller;

/**
 * Client side of the application
 */
public class Client{
	
	private InetAddress ipServer;
	private Controller controller;
	DatagramSocket socket;
	private List<String> waitingMsg;
	
	private Thread clientThread = new Thread() {
		public void run() {
			listen();
		}
	};
	
	public Client(InetAddress dest, Controller controller) {
		ipServer = dest;
		this.controller = controller;
		waitingMsg = new ArrayList<String>();
		
		try {
			socket = new DatagramSocket(Constant.CLIENT_PORT);
		} catch (SocketException e) {
			e.printStackTrace();
		}
		clientThread.start();
	}
	
	/**
	 * Listen for the data from the server
	 */
	private void listen() {
		String data;
		byte[] buffer = new byte[15000];
		DatagramPacket packet = new DatagramPacket(buffer, buffer.length);
		
		while(true) {
			try {
				socket.receive(packet);
			} catch (IOException e) {
				e.printStackTrace();
			}
			
			data = new String(packet.getData(), 0, packet.getLength());
			waitingMsg.add(data);
			
			System.out.println("Received : " + data + " from : " + packet.getAddress());
			process(data);
			}
	}

	/**
	 * Connection with server
	 */
	public void connect() {
		try {
			String g = "connect";
			byte[] bG = g.getBytes();
			DatagramPacket packet = new DatagramPacket(bG, bG.length, ipServer, Constant.SERVER_PORT);
			packet.setData(bG);
			
			socket.send(packet);			
		} catch (SocketException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void process(String data) {
		String[] splitData = new String[10];
		splitData = data.split("&");
		int x,y;
		Direction d;
		
		switch(splitData[0]) {
			case "board":
				int initialLocation = Integer.parseInt(splitData[1]);
				int finalLocation = Integer.parseInt(splitData[2]);
				controller.setBoard(new BoardPiece(new File(splitData[3]), initialLocation, finalLocation));
				break;
			case "robot":
				x = Integer.parseInt(splitData[1]);
				y = Integer.parseInt(splitData[2]);
				int originX = Integer.parseInt(splitData[4]);
				int originY = Integer.parseInt(splitData[5]);
				controller.setRobot(new Robot(x, y, Color.valueOf(splitData[3]), originX, originY));
				break;
			case "move":
				Color c = Color.valueOf(splitData[1]);
				d = Direction.valueOf(splitData[2]);
				controller.getgame().setSelectedRobot(c);
				controller.getgame().moveSelectedRobot(d);
			case "refresh":
				controller.refreshBoard();
				controller.refreshColumn();
				break;
			default:
				System.out.println("Flag inconnu");
				break;
		}
	}	
	
	/**
	 * Sent a new movement to server
	 * @param color : the color of robot to move
	 * @param d : the direction
	 * @see Color
	 * @see Direction
	 */
	public void sendMove(Color color, Direction d) {
			try {	
					String robotInfo = "move&" + color +
							"&" + d;
					
					byte[] robotInfoBytes = robotInfo.getBytes();
					DatagramPacket packet = new DatagramPacket(robotInfoBytes, robotInfoBytes.length, ipServer, Constant.SERVER_PORT);
					packet.setData(robotInfoBytes);
					socket.send(packet);		

			} catch (SocketException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
	}
}